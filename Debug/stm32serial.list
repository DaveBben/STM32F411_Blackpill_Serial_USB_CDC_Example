
stm32serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062b0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08006448  08006448  00016448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064ac  080064ac  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  080064ac  080064ac  000164ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064b4  080064b4  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064b4  080064b4  000164b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064b8  080064b8  000164b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080064bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b1c  20000180  0800663c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c9c  0800663c  00021c9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001237c  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d1c  00000000  00000000  0003252c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  00035248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  00035d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001816b  00000000  00000000  00036710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e685  00000000  00000000  0004e87b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086f8a  00000000  00000000  0005cf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3e8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b5c  00000000  00000000  000e3ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000180 	.word	0x20000180
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006430 	.word	0x08006430

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000184 	.word	0x20000184
 80001d4:	08006430 	.word	0x08006430

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	u_int8_t buffer[] = "Hello World";
 80004d6:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <main+0x34>)
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	ca07      	ldmia	r2, {r0, r1, r2}
 80004dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 f978 	bl	80007d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f810 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f876 	bl	80005d8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f005 fa64 	bl	80059b8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  CDC_Transmit_FS(buffer,sizeof(buffer));
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	210c      	movs	r1, #12
 80004f4:	4618      	mov	r0, r3
 80004f6:	f005 fb1d 	bl	8005b34 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 80004fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004fe:	f000 f9db 	bl	80008b8 <HAL_Delay>
	  CDC_Transmit_FS(buffer,sizeof(buffer));
 8000502:	e7f5      	b.n	80004f0 <main+0x20>
 8000504:	08006448 	.word	0x08006448

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f005 ff82 	bl	8006420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <SystemClock_Config+0xc8>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a26      	ldr	r2, [pc, #152]	; (80005d0 <SystemClock_Config+0xc8>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <SystemClock_Config+0xc8>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <SystemClock_Config+0xcc>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a20      	ldr	r2, [pc, #128]	; (80005d4 <SystemClock_Config+0xcc>)
 8000552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <SystemClock_Config+0xcc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000578:	2319      	movs	r3, #25
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800057c:	23c0      	movs	r3, #192	; 0xc0
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000584:	2304      	movs	r3, #4
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	4618      	mov	r0, r3
 800058e:	f001 fde9 	bl	8002164 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000598:	f000 f87e 	bl	8000698 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2103      	movs	r1, #3
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 f84b 	bl	8002654 <HAL_RCC_ClockConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005c4:	f000 f868 	bl	8000698 <Error_Handler>
  }
}
 80005c8:	bf00      	nop
 80005ca:	3750      	adds	r7, #80	; 0x50
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40007000 	.word	0x40007000

080005d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
 80005f2:	4b27      	ldr	r3, [pc, #156]	; (8000690 <MX_GPIO_Init+0xb8>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a26      	ldr	r2, [pc, #152]	; (8000690 <MX_GPIO_Init+0xb8>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b24      	ldr	r3, [pc, #144]	; (8000690 <MX_GPIO_Init+0xb8>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <MX_GPIO_Init+0xb8>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a1f      	ldr	r2, [pc, #124]	; (8000690 <MX_GPIO_Init+0xb8>)
 8000614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <MX_GPIO_Init+0xb8>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <MX_GPIO_Init+0xb8>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a18      	ldr	r2, [pc, #96]	; (8000690 <MX_GPIO_Init+0xb8>)
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <MX_GPIO_Init+0xb8>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_GPIO_Init+0xb8>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a11      	ldr	r2, [pc, #68]	; (8000690 <MX_GPIO_Init+0xb8>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_GPIO_Init+0xb8>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000664:	480b      	ldr	r0, [pc, #44]	; (8000694 <MX_GPIO_Init+0xbc>)
 8000666:	f000 fbe1 	bl	8000e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800066a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_GPIO_Init+0xbc>)
 8000684:	f000 fa4e 	bl	8000b24 <HAL_GPIO_Init>

}
 8000688:	bf00      	nop
 800068a:	3728      	adds	r7, #40	; 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40020400 	.word	0x40020400

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <Error_Handler+0x8>
	...

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <HAL_MspInit+0x4c>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <HAL_MspInit+0x4c>)
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <HAL_MspInit+0x4c>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <HAL_MspInit+0x4c>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <HAL_MspInit+0x4c>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d4:	6413      	str	r3, [r2, #64]	; 0x40
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_MspInit+0x4c>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <NMI_Handler+0x4>

080006fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler+0x4>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <MemManage_Handler+0x4>

08000706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <BusFault_Handler+0x4>

0800070c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <UsageFault_Handler+0x4>

08000712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f000 f89a 	bl	8000878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <OTG_FS_IRQHandler+0x10>)
 800074e:	f000 fcd6 	bl	80010fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20001894 	.word	0x20001894

0800075c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <SystemInit+0x20>)
 8000762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000766:	4a05      	ldr	r2, [pc, #20]	; (800077c <SystemInit+0x20>)
 8000768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800076c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000784:	480d      	ldr	r0, [pc, #52]	; (80007bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000786:	490e      	ldr	r1, [pc, #56]	; (80007c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000788:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800078c:	e002      	b.n	8000794 <LoopCopyDataInit>

0800078e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000792:	3304      	adds	r3, #4

08000794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000798:	d3f9      	bcc.n	800078e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079a:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800079c:	4c0b      	ldr	r4, [pc, #44]	; (80007cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a0:	e001      	b.n	80007a6 <LoopFillZerobss>

080007a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a4:	3204      	adds	r2, #4

080007a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a8:	d3fb      	bcc.n	80007a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007aa:	f7ff ffd7 	bl	800075c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ae:	f005 fe13 	bl	80063d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007b2:	f7ff fe8d 	bl	80004d0 <main>
  bx  lr    
 80007b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c0:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80007c4:	080064bc 	.word	0x080064bc
  ldr r2, =_sbss
 80007c8:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80007cc:	20001c9c 	.word	0x20001c9c

080007d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007d0:	e7fe      	b.n	80007d0 <ADC_IRQHandler>
	...

080007d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <HAL_Init+0x40>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0d      	ldr	r2, [pc, #52]	; (8000814 <HAL_Init+0x40>)
 80007de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <HAL_Init+0x40>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <HAL_Init+0x40>)
 80007ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_Init+0x40>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a07      	ldr	r2, [pc, #28]	; (8000814 <HAL_Init+0x40>)
 80007f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007fc:	2003      	movs	r0, #3
 80007fe:	f000 f94f 	bl	8000aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000802:	200f      	movs	r0, #15
 8000804:	f000 f808 	bl	8000818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000808:	f7ff ff4c 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023c00 	.word	0x40023c00

08000818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_InitTick+0x54>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_InitTick+0x58>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000832:	fbb2 f3f3 	udiv	r3, r2, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f967 	bl	8000b0a <HAL_SYSTICK_Config>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e00e      	b.n	8000864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d80a      	bhi.n	8000862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084c:	2200      	movs	r2, #0
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f000 f92f 	bl	8000ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000858:	4a06      	ldr	r2, [pc, #24]	; (8000874 <HAL_InitTick+0x5c>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085e:	2300      	movs	r3, #0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000000 	.word	0x20000000
 8000870:	20000008 	.word	0x20000008
 8000874:	20000004 	.word	0x20000004

08000878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_IncTick+0x20>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_IncTick+0x24>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4413      	add	r3, r2
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <HAL_IncTick+0x24>)
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000008 	.word	0x20000008
 800089c:	200003c0 	.word	0x200003c0

080008a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return uwTick;
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <HAL_GetTick+0x14>)
 80008a6:	681b      	ldr	r3, [r3, #0]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	200003c0 	.word	0x200003c0

080008b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c0:	f7ff ffee 	bl	80008a0 <HAL_GetTick>
 80008c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d0:	d005      	beq.n	80008de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d2:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <HAL_Delay+0x44>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4413      	add	r3, r2
 80008dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008de:	bf00      	nop
 80008e0:	f7ff ffde 	bl	80008a0 <HAL_GetTick>
 80008e4:	4602      	mov	r2, r0
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d8f7      	bhi.n	80008e0 <HAL_Delay+0x28>
  {
  }
}
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000008 	.word	0x20000008

08000900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800091c:	4013      	ands	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000932:	4a04      	ldr	r2, [pc, #16]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	60d3      	str	r3, [r2, #12]
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <__NVIC_GetPriorityGrouping+0x18>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	f003 0307 	and.w	r3, r3, #7
}
 8000956:	4618      	mov	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	2b00      	cmp	r3, #0
 8000974:	db0b      	blt.n	800098e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	f003 021f 	and.w	r2, r3, #31
 800097c:	4907      	ldr	r1, [pc, #28]	; (800099c <__NVIC_EnableIRQ+0x38>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	095b      	lsrs	r3, r3, #5
 8000984:	2001      	movs	r0, #1
 8000986:	fa00 f202 	lsl.w	r2, r0, r2
 800098a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000e100 	.word	0xe000e100

080009a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	db0a      	blt.n	80009ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	490c      	ldr	r1, [pc, #48]	; (80009ec <__NVIC_SetPriority+0x4c>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	0112      	lsls	r2, r2, #4
 80009c0:	b2d2      	uxtb	r2, r2
 80009c2:	440b      	add	r3, r1
 80009c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c8:	e00a      	b.n	80009e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4908      	ldr	r1, [pc, #32]	; (80009f0 <__NVIC_SetPriority+0x50>)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	f003 030f 	and.w	r3, r3, #15
 80009d6:	3b04      	subs	r3, #4
 80009d8:	0112      	lsls	r2, r2, #4
 80009da:	b2d2      	uxtb	r2, r2
 80009dc:	440b      	add	r3, r1
 80009de:	761a      	strb	r2, [r3, #24]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000e100 	.word	0xe000e100
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b089      	sub	sp, #36	; 0x24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	f1c3 0307 	rsb	r3, r3, #7
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	bf28      	it	cs
 8000a12:	2304      	movcs	r3, #4
 8000a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	2b06      	cmp	r3, #6
 8000a1c:	d902      	bls.n	8000a24 <NVIC_EncodePriority+0x30>
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3b03      	subs	r3, #3
 8000a22:	e000      	b.n	8000a26 <NVIC_EncodePriority+0x32>
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a28:	f04f 32ff 	mov.w	r2, #4294967295
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43da      	mvns	r2, r3
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	401a      	ands	r2, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	43d9      	mvns	r1, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	4313      	orrs	r3, r2
         );
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3724      	adds	r7, #36	; 0x24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a6c:	d301      	bcc.n	8000a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00f      	b.n	8000a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <SysTick_Config+0x40>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7a:	210f      	movs	r1, #15
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f7ff ff8e 	bl	80009a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <SysTick_Config+0x40>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8a:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <SysTick_Config+0x40>)
 8000a8c:	2207      	movs	r2, #7
 8000a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	e000e010 	.word	0xe000e010

08000aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff29 	bl	8000900 <__NVIC_SetPriorityGrouping>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4603      	mov	r3, r0
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac8:	f7ff ff3e 	bl	8000948 <__NVIC_GetPriorityGrouping>
 8000acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	6978      	ldr	r0, [r7, #20]
 8000ad4:	f7ff ff8e 	bl	80009f4 <NVIC_EncodePriority>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff5d 	bl	80009a0 <__NVIC_SetPriority>
}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff31 	bl	8000964 <__NVIC_EnableIRQ>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff ffa2 	bl	8000a5c <SysTick_Config>
 8000b18:	4603      	mov	r3, r0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b089      	sub	sp, #36	; 0x24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
 8000b3e:	e159      	b.n	8000df4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b40:	2201      	movs	r2, #1
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	f040 8148 	bne.w	8000dee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 0303 	and.w	r3, r3, #3
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d005      	beq.n	8000b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d130      	bne.n	8000bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	2203      	movs	r2, #3
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bac:	2201      	movs	r2, #1
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	091b      	lsrs	r3, r3, #4
 8000bc2:	f003 0201 	and.w	r2, r3, #1
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d017      	beq.n	8000c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2203      	movs	r2, #3
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d123      	bne.n	8000c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	08da      	lsrs	r2, r3, #3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3208      	adds	r2, #8
 8000c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	220f      	movs	r2, #15
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	691a      	ldr	r2, [r3, #16]
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	08da      	lsrs	r2, r3, #3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3208      	adds	r2, #8
 8000c62:	69b9      	ldr	r1, [r7, #24]
 8000c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0203 	and.w	r2, r3, #3
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 80a2 	beq.w	8000dee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b57      	ldr	r3, [pc, #348]	; (8000e0c <HAL_GPIO_Init+0x2e8>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	4a56      	ldr	r2, [pc, #344]	; (8000e0c <HAL_GPIO_Init+0x2e8>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cba:	4b54      	ldr	r3, [pc, #336]	; (8000e0c <HAL_GPIO_Init+0x2e8>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cc6:	4a52      	ldr	r2, [pc, #328]	; (8000e10 <HAL_GPIO_Init+0x2ec>)
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	089b      	lsrs	r3, r3, #2
 8000ccc:	3302      	adds	r3, #2
 8000cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	220f      	movs	r2, #15
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a49      	ldr	r2, [pc, #292]	; (8000e14 <HAL_GPIO_Init+0x2f0>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d019      	beq.n	8000d26 <HAL_GPIO_Init+0x202>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a48      	ldr	r2, [pc, #288]	; (8000e18 <HAL_GPIO_Init+0x2f4>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d013      	beq.n	8000d22 <HAL_GPIO_Init+0x1fe>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a47      	ldr	r2, [pc, #284]	; (8000e1c <HAL_GPIO_Init+0x2f8>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d00d      	beq.n	8000d1e <HAL_GPIO_Init+0x1fa>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a46      	ldr	r2, [pc, #280]	; (8000e20 <HAL_GPIO_Init+0x2fc>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d007      	beq.n	8000d1a <HAL_GPIO_Init+0x1f6>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a45      	ldr	r2, [pc, #276]	; (8000e24 <HAL_GPIO_Init+0x300>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d101      	bne.n	8000d16 <HAL_GPIO_Init+0x1f2>
 8000d12:	2304      	movs	r3, #4
 8000d14:	e008      	b.n	8000d28 <HAL_GPIO_Init+0x204>
 8000d16:	2307      	movs	r3, #7
 8000d18:	e006      	b.n	8000d28 <HAL_GPIO_Init+0x204>
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e004      	b.n	8000d28 <HAL_GPIO_Init+0x204>
 8000d1e:	2302      	movs	r3, #2
 8000d20:	e002      	b.n	8000d28 <HAL_GPIO_Init+0x204>
 8000d22:	2301      	movs	r3, #1
 8000d24:	e000      	b.n	8000d28 <HAL_GPIO_Init+0x204>
 8000d26:	2300      	movs	r3, #0
 8000d28:	69fa      	ldr	r2, [r7, #28]
 8000d2a:	f002 0203 	and.w	r2, r2, #3
 8000d2e:	0092      	lsls	r2, r2, #2
 8000d30:	4093      	lsls	r3, r2
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d38:	4935      	ldr	r1, [pc, #212]	; (8000e10 <HAL_GPIO_Init+0x2ec>)
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	089b      	lsrs	r3, r3, #2
 8000d3e:	3302      	adds	r3, #2
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d46:	4b38      	ldr	r3, [pc, #224]	; (8000e28 <HAL_GPIO_Init+0x304>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4013      	ands	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d6a:	4a2f      	ldr	r2, [pc, #188]	; (8000e28 <HAL_GPIO_Init+0x304>)
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d70:	4b2d      	ldr	r3, [pc, #180]	; (8000e28 <HAL_GPIO_Init+0x304>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d94:	4a24      	ldr	r2, [pc, #144]	; (8000e28 <HAL_GPIO_Init+0x304>)
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d9a:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <HAL_GPIO_Init+0x304>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dbe:	4a1a      	ldr	r2, [pc, #104]	; (8000e28 <HAL_GPIO_Init+0x304>)
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_GPIO_Init+0x304>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000de8:	4a0f      	ldr	r2, [pc, #60]	; (8000e28 <HAL_GPIO_Init+0x304>)
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3301      	adds	r3, #1
 8000df2:	61fb      	str	r3, [r7, #28]
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	2b0f      	cmp	r3, #15
 8000df8:	f67f aea2 	bls.w	8000b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3724      	adds	r7, #36	; 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40013800 	.word	0x40013800
 8000e14:	40020000 	.word	0x40020000
 8000e18:	40020400 	.word	0x40020400
 8000e1c:	40020800 	.word	0x40020800
 8000e20:	40020c00 	.word	0x40020c00
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40013c00 	.word	0x40013c00

08000e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e3c:	787b      	ldrb	r3, [r7, #1]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e48:	e003      	b.n	8000e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	041a      	lsls	r2, r3, #16
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	619a      	str	r2, [r3, #24]
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e60:	b08f      	sub	sp, #60	; 0x3c
 8000e62:	af0a      	add	r7, sp, #40	; 0x28
 8000e64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d101      	bne.n	8000e70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e10f      	b.n	8001090 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d106      	bne.n	8000e90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f004 ff9a 	bl	8005dc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2203      	movs	r2, #3
 8000e94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d102      	bne.n	8000eaa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 fe8d 	bl	8002bce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	687e      	ldr	r6, [r7, #4]
 8000ebc:	466d      	mov	r5, sp
 8000ebe:	f106 0410 	add.w	r4, r6, #16
 8000ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ece:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ed2:	1d33      	adds	r3, r6, #4
 8000ed4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ed6:	6838      	ldr	r0, [r7, #0]
 8000ed8:	f001 fd64 	bl	80029a4 <USB_CoreInit>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d005      	beq.n	8000eee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e0d0      	b.n	8001090 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 fe7b 	bl	8002bf0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	e04a      	b.n	8000f96 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f00:	7bfa      	ldrb	r2, [r7, #15]
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	4613      	mov	r3, r2
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	1a9b      	subs	r3, r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	333d      	adds	r3, #61	; 0x3d
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	1a9b      	subs	r3, r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	440b      	add	r3, r1
 8000f22:	333c      	adds	r3, #60	; 0x3c
 8000f24:	7bfa      	ldrb	r2, [r7, #15]
 8000f26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f28:	7bfa      	ldrb	r2, [r7, #15]
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	b298      	uxth	r0, r3
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	1a9b      	subs	r3, r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	3342      	adds	r3, #66	; 0x42
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f40:	7bfa      	ldrb	r2, [r7, #15]
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	4613      	mov	r3, r2
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	1a9b      	subs	r3, r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	333f      	adds	r3, #63	; 0x3f
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f54:	7bfa      	ldrb	r2, [r7, #15]
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	1a9b      	subs	r3, r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	440b      	add	r3, r1
 8000f62:	3344      	adds	r3, #68	; 0x44
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f68:	7bfa      	ldrb	r2, [r7, #15]
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	1a9b      	subs	r3, r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	440b      	add	r3, r1
 8000f76:	3348      	adds	r3, #72	; 0x48
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f7c:	7bfa      	ldrb	r2, [r7, #15]
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	4613      	mov	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	1a9b      	subs	r3, r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	3350      	adds	r3, #80	; 0x50
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	3301      	adds	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	7bfa      	ldrb	r2, [r7, #15]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d3af      	bcc.n	8000f00 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e044      	b.n	8001030 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	1a9b      	subs	r3, r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fbc:	7bfa      	ldrb	r2, [r7, #15]
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	1a9b      	subs	r3, r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	440b      	add	r3, r1
 8000fca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	1a9b      	subs	r3, r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fe8:	7bfa      	ldrb	r2, [r7, #15]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	4613      	mov	r3, r2
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	1a9b      	subs	r3, r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ffe:	7bfa      	ldrb	r2, [r7, #15]
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	1a9b      	subs	r3, r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	440b      	add	r3, r1
 800100c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	1a9b      	subs	r3, r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	3301      	adds	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	7bfa      	ldrb	r2, [r7, #15]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	429a      	cmp	r2, r3
 8001038:	d3b5      	bcc.n	8000fa6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	687e      	ldr	r6, [r7, #4]
 8001042:	466d      	mov	r5, sp
 8001044:	f106 0410 	add.w	r4, r6, #16
 8001048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001050:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001054:	e885 0003 	stmia.w	r5, {r0, r1}
 8001058:	1d33      	adds	r3, r6, #4
 800105a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800105c:	6838      	ldr	r0, [r7, #0]
 800105e:	f001 fe13 	bl	8002c88 <USB_DevInit>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d005      	beq.n	8001074 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2202      	movs	r2, #2
 800106c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e00d      	b.n	8001090 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f002 fe8f 	bl	8003dac <USB_DevDisconnect>

  return HAL_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001098 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d101      	bne.n	80010b4 <HAL_PCD_Start+0x1c>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e020      	b.n	80010f6 <HAL_PCD_Start+0x5e>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d109      	bne.n	80010d8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d005      	beq.n	80010d8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 fd65 	bl	8002bac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 fe3f 	bl	8003d6a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010fe:	b590      	push	{r4, r7, lr}
 8001100:	b08d      	sub	sp, #52	; 0x34
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800110c:	6a3b      	ldr	r3, [r7, #32]
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f002 fefd 	bl	8003f14 <USB_GetMode>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	f040 839d 	bne.w	800185c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f002 fe61 	bl	8003dee <USB_ReadInterrupts>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 8393 	beq.w	800185a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f002 fe58 	bl	8003dee <USB_ReadInterrupts>
 800113e:	4603      	mov	r3, r0
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b02      	cmp	r3, #2
 8001146:	d107      	bne.n	8001158 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	695a      	ldr	r2, [r3, #20]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f002 0202 	and.w	r2, r2, #2
 8001156:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f002 fe46 	bl	8003dee <USB_ReadInterrupts>
 8001162:	4603      	mov	r3, r0
 8001164:	f003 0310 	and.w	r3, r3, #16
 8001168:	2b10      	cmp	r3, #16
 800116a:	d161      	bne.n	8001230 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	699a      	ldr	r2, [r3, #24]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0210 	bic.w	r2, r2, #16
 800117a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800117c:	6a3b      	ldr	r3, [r7, #32]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	f003 020f 	and.w	r2, r3, #15
 8001188:	4613      	mov	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	1a9b      	subs	r3, r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	4413      	add	r3, r2
 8001198:	3304      	adds	r3, #4
 800119a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	0c5b      	lsrs	r3, r3, #17
 80011a0:	f003 030f 	and.w	r3, r3, #15
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d124      	bne.n	80011f2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d035      	beq.n	8001220 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	091b      	lsrs	r3, r3, #4
 80011bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	461a      	mov	r2, r3
 80011c6:	6a38      	ldr	r0, [r7, #32]
 80011c8:	f002 fc7d 	bl	8003ac6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011d8:	441a      	add	r2, r3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	091b      	lsrs	r3, r3, #4
 80011e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011ea:	441a      	add	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	619a      	str	r2, [r3, #24]
 80011f0:	e016      	b.n	8001220 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	0c5b      	lsrs	r3, r3, #17
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d110      	bne.n	8001220 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001204:	2208      	movs	r2, #8
 8001206:	4619      	mov	r1, r3
 8001208:	6a38      	ldr	r0, [r7, #32]
 800120a:	f002 fc5c 	bl	8003ac6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	699a      	ldr	r2, [r3, #24]
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	091b      	lsrs	r3, r3, #4
 8001216:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800121a:	441a      	add	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	699a      	ldr	r2, [r3, #24]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0210 	orr.w	r2, r2, #16
 800122e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f002 fdda 	bl	8003dee <USB_ReadInterrupts>
 800123a:	4603      	mov	r3, r0
 800123c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001240:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001244:	d16e      	bne.n	8001324 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f002 fde0 	bl	8003e14 <USB_ReadDevAllOutEpInterrupt>
 8001254:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001256:	e062      	b.n	800131e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d057      	beq.n	8001312 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f002 fe05 	bl	8003e7c <USB_ReadDevOutEPInterrupt>
 8001272:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00c      	beq.n	8001298 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	015a      	lsls	r2, r3, #5
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	4413      	add	r3, r2
 8001286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800128a:	461a      	mov	r2, r3
 800128c:	2301      	movs	r3, #1
 800128e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 fdb0 	bl	8001df8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00c      	beq.n	80012bc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	015a      	lsls	r2, r3, #5
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	4413      	add	r3, r2
 80012aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012ae:	461a      	mov	r2, r3
 80012b0:	2308      	movs	r3, #8
 80012b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 feaa 	bl	8002010 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d008      	beq.n	80012d8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	015a      	lsls	r2, r3, #5
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	4413      	add	r3, r2
 80012ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012d2:	461a      	mov	r2, r3
 80012d4:	2310      	movs	r3, #16
 80012d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	f003 0320 	and.w	r3, r3, #32
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d008      	beq.n	80012f4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	015a      	lsls	r2, r3, #5
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	4413      	add	r3, r2
 80012ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012ee:	461a      	mov	r2, r3
 80012f0:	2320      	movs	r3, #32
 80012f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d009      	beq.n	8001312 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	015a      	lsls	r2, r3, #5
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	4413      	add	r3, r2
 8001306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800130a:	461a      	mov	r2, r3
 800130c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001310:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	3301      	adds	r3, #1
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131a:	085b      	lsrs	r3, r3, #1
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001320:	2b00      	cmp	r3, #0
 8001322:	d199      	bne.n	8001258 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f002 fd60 	bl	8003dee <USB_ReadInterrupts>
 800132e:	4603      	mov	r3, r0
 8001330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001334:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001338:	f040 80c0 	bne.w	80014bc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f002 fd81 	bl	8003e48 <USB_ReadDevAllInEpInterrupt>
 8001346:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800134c:	e0b2      	b.n	80014b4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800134e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80a7 	beq.w	80014a8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f002 fda7 	bl	8003eb8 <USB_ReadDevInEPInterrupt>
 800136a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d057      	beq.n	8001426 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	2201      	movs	r2, #1
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800138a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	43db      	mvns	r3, r3
 8001390:	69f9      	ldr	r1, [r7, #28]
 8001392:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001396:	4013      	ands	r3, r2
 8001398:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	015a      	lsls	r2, r3, #5
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	4413      	add	r3, r2
 80013a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013a6:	461a      	mov	r2, r3
 80013a8:	2301      	movs	r3, #1
 80013aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d132      	bne.n	800141a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b8:	4613      	mov	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	1a9b      	subs	r3, r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	3348      	adds	r3, #72	; 0x48
 80013c4:	6819      	ldr	r1, [r3, #0]
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ca:	4613      	mov	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	1a9b      	subs	r3, r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4403      	add	r3, r0
 80013d4:	3344      	adds	r3, #68	; 0x44
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4419      	add	r1, r3
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013de:	4613      	mov	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	1a9b      	subs	r3, r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4403      	add	r3, r0
 80013e8:	3348      	adds	r3, #72	; 0x48
 80013ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d113      	bne.n	800141a <HAL_PCD_IRQHandler+0x31c>
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f6:	4613      	mov	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	1a9b      	subs	r3, r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	440b      	add	r3, r1
 8001400:	3350      	adds	r3, #80	; 0x50
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d108      	bne.n	800141a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001412:	461a      	mov	r2, r3
 8001414:	2101      	movs	r1, #1
 8001416:	f002 fdaf 	bl	8003f78 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	b2db      	uxtb	r3, r3
 800141e:	4619      	mov	r1, r3
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f004 fd50 	bl	8005ec6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	f003 0308 	and.w	r3, r3, #8
 800142c:	2b00      	cmp	r3, #0
 800142e:	d008      	beq.n	8001442 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	015a      	lsls	r2, r3, #5
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	4413      	add	r3, r2
 8001438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800143c:	461a      	mov	r2, r3
 800143e:	2308      	movs	r3, #8
 8001440:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	f003 0310 	and.w	r3, r3, #16
 8001448:	2b00      	cmp	r3, #0
 800144a:	d008      	beq.n	800145e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	015a      	lsls	r2, r3, #5
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	4413      	add	r3, r2
 8001454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001458:	461a      	mov	r2, r3
 800145a:	2310      	movs	r3, #16
 800145c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001464:	2b00      	cmp	r3, #0
 8001466:	d008      	beq.n	800147a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	015a      	lsls	r2, r3, #5
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	4413      	add	r3, r2
 8001470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001474:	461a      	mov	r2, r3
 8001476:	2340      	movs	r3, #64	; 0x40
 8001478:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d008      	beq.n	8001496 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	015a      	lsls	r2, r3, #5
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	4413      	add	r3, r2
 800148c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001490:	461a      	mov	r2, r3
 8001492:	2302      	movs	r3, #2
 8001494:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 fc1b 	bl	8001cde <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	3301      	adds	r3, #1
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b0:	085b      	lsrs	r3, r3, #1
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f47f af49 	bne.w	800134e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 fc94 	bl	8003dee <USB_ReadInterrupts>
 80014c6:	4603      	mov	r3, r0
 80014c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014d0:	d122      	bne.n	8001518 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014e0:	f023 0301 	bic.w	r3, r3, #1
 80014e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d108      	bne.n	8001502 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80014f8:	2100      	movs	r1, #0
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fe26 	bl	800214c <HAL_PCDEx_LPM_Callback>
 8001500:	e002      	b.n	8001508 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f004 fd4c 	bl	8005fa0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001516:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f002 fc66 	bl	8003dee <USB_ReadInterrupts>
 8001522:	4603      	mov	r3, r0
 8001524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800152c:	d112      	bne.n	8001554 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b01      	cmp	r3, #1
 800153c:	d102      	bne.n	8001544 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f004 fd08 	bl	8005f54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	695a      	ldr	r2, [r3, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001552:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f002 fc48 	bl	8003dee <USB_ReadInterrupts>
 800155e:	4603      	mov	r3, r0
 8001560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001568:	f040 80c7 	bne.w	80016fa <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800157a:	f023 0301 	bic.w	r3, r3, #1
 800157e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2110      	movs	r1, #16
 8001586:	4618      	mov	r0, r3
 8001588:	f001 fce2 	bl	8002f50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001590:	e056      	b.n	8001640 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001594:	015a      	lsls	r2, r3, #5
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	4413      	add	r3, r2
 800159a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800159e:	461a      	mov	r2, r3
 80015a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a8:	015a      	lsls	r2, r3, #5
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	4413      	add	r3, r2
 80015ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015b6:	0151      	lsls	r1, r2, #5
 80015b8:	69fa      	ldr	r2, [r7, #28]
 80015ba:	440a      	add	r2, r1
 80015bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015c4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80015c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c8:	015a      	lsls	r2, r3, #5
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	4413      	add	r3, r2
 80015ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015d6:	0151      	lsls	r1, r2, #5
 80015d8:	69fa      	ldr	r2, [r7, #28]
 80015da:	440a      	add	r2, r1
 80015dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80015e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e8:	015a      	lsls	r2, r3, #5
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	4413      	add	r3, r2
 80015ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015f2:	461a      	mov	r2, r3
 80015f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80015fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fc:	015a      	lsls	r2, r3, #5
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	4413      	add	r3, r2
 8001602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800160a:	0151      	lsls	r1, r2, #5
 800160c:	69fa      	ldr	r2, [r7, #28]
 800160e:	440a      	add	r2, r1
 8001610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001614:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001618:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800161a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161c:	015a      	lsls	r2, r3, #5
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	4413      	add	r3, r2
 8001622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800162a:	0151      	lsls	r1, r2, #5
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	440a      	add	r2, r1
 8001630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001634:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001638:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800163a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163c:	3301      	adds	r3, #1
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001646:	429a      	cmp	r2, r3
 8001648:	d3a3      	bcc.n	8001592 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001658:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800165c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	2b00      	cmp	r3, #0
 8001664:	d016      	beq.n	8001694 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800166c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001676:	f043 030b 	orr.w	r3, r3, #11
 800167a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800168c:	f043 030b 	orr.w	r3, r3, #11
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	e015      	b.n	80016c0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016a6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80016aa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ba:	f043 030b 	orr.w	r3, r3, #11
 80016be:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	69fa      	ldr	r2, [r7, #28]
 80016ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80016d2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6818      	ldr	r0, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016e4:	461a      	mov	r2, r3
 80016e6:	f002 fc47 	bl	8003f78 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80016f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f002 fb75 	bl	8003dee <USB_ReadInterrupts>
 8001704:	4603      	mov	r3, r0
 8001706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800170a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800170e:	d124      	bne.n	800175a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f002 fc0b 	bl	8003f30 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f001 fc73 	bl	800300a <USB_GetDevSpeed>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681c      	ldr	r4, [r3, #0]
 8001730:	f001 f92c 	bl	800298c <HAL_RCC_GetHCLKFreq>
 8001734:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800173a:	b2db      	uxtb	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	4620      	mov	r0, r4
 8001740:	f001 f992 	bl	8002a68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f004 fbe6 	bl	8005f16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	695a      	ldr	r2, [r3, #20]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001758:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f002 fb45 	bl	8003dee <USB_ReadInterrupts>
 8001764:	4603      	mov	r3, r0
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b08      	cmp	r3, #8
 800176c:	d10a      	bne.n	8001784 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f004 fbc3 	bl	8005efa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	695a      	ldr	r2, [r3, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f002 0208 	and.w	r2, r2, #8
 8001782:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f002 fb30 	bl	8003dee <USB_ReadInterrupts>
 800178e:	4603      	mov	r3, r0
 8001790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001794:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001798:	d10f      	bne.n	80017ba <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	4619      	mov	r1, r3
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f004 fc1b 	bl	8005fe0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	695a      	ldr	r2, [r3, #20]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80017b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f002 fb15 	bl	8003dee <USB_ReadInterrupts>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017ce:	d10f      	bne.n	80017f0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	4619      	mov	r1, r3
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f004 fbee 	bl	8005fbc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80017ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f002 fafa 	bl	8003dee <USB_ReadInterrupts>
 80017fa:	4603      	mov	r3, r0
 80017fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001804:	d10a      	bne.n	800181c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f004 fbfc 	bl	8006004 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	695a      	ldr	r2, [r3, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800181a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f002 fae4 	bl	8003dee <USB_ReadInterrupts>
 8001826:	4603      	mov	r3, r0
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b04      	cmp	r3, #4
 800182e:	d115      	bne.n	800185c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f004 fbec 	bl	8006020 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6859      	ldr	r1, [r3, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	430a      	orrs	r2, r1
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	e000      	b.n	800185c <HAL_PCD_IRQHandler+0x75e>
      return;
 800185a:	bf00      	nop
    }
  }
}
 800185c:	3734      	adds	r7, #52	; 0x34
 800185e:	46bd      	mov	sp, r7
 8001860:	bd90      	pop	{r4, r7, pc}

08001862 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	460b      	mov	r3, r1
 800186c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001874:	2b01      	cmp	r3, #1
 8001876:	d101      	bne.n	800187c <HAL_PCD_SetAddress+0x1a>
 8001878:	2302      	movs	r3, #2
 800187a:	e013      	b.n	80018a4 <HAL_PCD_SetAddress+0x42>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	78fa      	ldrb	r2, [r7, #3]
 8001888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	78fa      	ldrb	r2, [r7, #3]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f002 fa42 	bl	8003d1e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	4608      	mov	r0, r1
 80018b6:	4611      	mov	r1, r2
 80018b8:	461a      	mov	r2, r3
 80018ba:	4603      	mov	r3, r0
 80018bc:	70fb      	strb	r3, [r7, #3]
 80018be:	460b      	mov	r3, r1
 80018c0:	803b      	strh	r3, [r7, #0]
 80018c2:	4613      	mov	r3, r2
 80018c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	da0f      	bge.n	80018f2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	f003 020f 	and.w	r2, r3, #15
 80018d8:	4613      	mov	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	1a9b      	subs	r3, r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	3338      	adds	r3, #56	; 0x38
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	3304      	adds	r3, #4
 80018e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2201      	movs	r2, #1
 80018ee:	705a      	strb	r2, [r3, #1]
 80018f0:	e00f      	b.n	8001912 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	f003 020f 	and.w	r2, r3, #15
 80018f8:	4613      	mov	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	1a9b      	subs	r3, r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	4413      	add	r3, r2
 8001908:	3304      	adds	r3, #4
 800190a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	b2da      	uxtb	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800191e:	883a      	ldrh	r2, [r7, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	78ba      	ldrb	r2, [r7, #2]
 8001928:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	785b      	ldrb	r3, [r3, #1]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d004      	beq.n	800193c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b29a      	uxth	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800193c:	78bb      	ldrb	r3, [r7, #2]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d102      	bne.n	8001948 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800194e:	2b01      	cmp	r3, #1
 8001950:	d101      	bne.n	8001956 <HAL_PCD_EP_Open+0xaa>
 8001952:	2302      	movs	r3, #2
 8001954:	e00e      	b.n	8001974 <HAL_PCD_EP_Open+0xc8>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68f9      	ldr	r1, [r7, #12]
 8001964:	4618      	mov	r0, r3
 8001966:	f001 fb75 	bl	8003054 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001972:	7afb      	ldrb	r3, [r7, #11]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001988:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800198c:	2b00      	cmp	r3, #0
 800198e:	da0f      	bge.n	80019b0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	f003 020f 	and.w	r2, r3, #15
 8001996:	4613      	mov	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	1a9b      	subs	r3, r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	3338      	adds	r3, #56	; 0x38
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4413      	add	r3, r2
 80019a4:	3304      	adds	r3, #4
 80019a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2201      	movs	r2, #1
 80019ac:	705a      	strb	r2, [r3, #1]
 80019ae:	e00f      	b.n	80019d0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	f003 020f 	and.w	r2, r3, #15
 80019b6:	4613      	mov	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	1a9b      	subs	r3, r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	3304      	adds	r3, #4
 80019c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_PCD_EP_Close+0x6e>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e00e      	b.n	8001a08 <HAL_PCD_EP_Close+0x8c>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68f9      	ldr	r1, [r7, #12]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f001 fbb3 	bl	8003164 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a20:	7afb      	ldrb	r3, [r7, #11]
 8001a22:	f003 020f 	and.w	r2, r3, #15
 8001a26:	4613      	mov	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	1a9b      	subs	r3, r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	4413      	add	r3, r2
 8001a36:	3304      	adds	r3, #4
 8001a38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a52:	7afb      	ldrb	r3, [r7, #11]
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d102      	bne.n	8001a6c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a6c:	7afb      	ldrb	r3, [r7, #11]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	6979      	ldr	r1, [r7, #20]
 8001a84:	f001 fe8e 	bl	80037a4 <USB_EP0StartXfer>
 8001a88:	e008      	b.n	8001a9c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	6979      	ldr	r1, [r7, #20]
 8001a98:	f001 fc40 	bl	800331c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	f003 020f 	and.w	r2, r3, #15
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001ac8:	681b      	ldr	r3, [r3, #0]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	607a      	str	r2, [r7, #4]
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ae6:	7afb      	ldrb	r3, [r7, #11]
 8001ae8:	f003 020f 	and.w	r2, r3, #15
 8001aec:	4613      	mov	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	1a9b      	subs	r3, r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	3338      	adds	r3, #56	; 0x38
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4413      	add	r3, r2
 8001afa:	3304      	adds	r3, #4
 8001afc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	2201      	movs	r2, #1
 8001b14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b16:	7afb      	ldrb	r3, [r7, #11]
 8001b18:	f003 030f 	and.w	r3, r3, #15
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d102      	bne.n	8001b30 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b30:	7afb      	ldrb	r3, [r7, #11]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d109      	bne.n	8001b4e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	461a      	mov	r2, r3
 8001b46:	6979      	ldr	r1, [r7, #20]
 8001b48:	f001 fe2c 	bl	80037a4 <USB_EP0StartXfer>
 8001b4c:	e008      	b.n	8001b60 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	6979      	ldr	r1, [r7, #20]
 8001b5c:	f001 fbde 	bl	800331c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b084      	sub	sp, #16
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b76:	78fb      	ldrb	r3, [r7, #3]
 8001b78:	f003 020f 	and.w	r2, r3, #15
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d901      	bls.n	8001b88 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e050      	b.n	8001c2a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	da0f      	bge.n	8001bb0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	f003 020f 	and.w	r2, r3, #15
 8001b96:	4613      	mov	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	1a9b      	subs	r3, r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	3338      	adds	r3, #56	; 0x38
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	705a      	strb	r2, [r3, #1]
 8001bae:	e00d      	b.n	8001bcc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	1a9b      	subs	r3, r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_PCD_EP_SetStall+0x82>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e01e      	b.n	8001c2a <HAL_PCD_EP_SetStall+0xc0>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68f9      	ldr	r1, [r7, #12]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f001 ffbb 	bl	8003b76 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10a      	bne.n	8001c20 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	b2d9      	uxtb	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	f002 f9ac 	bl	8003f78 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b084      	sub	sp, #16
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	f003 020f 	and.w	r2, r3, #15
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d901      	bls.n	8001c50 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e042      	b.n	8001cd6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	da0f      	bge.n	8001c78 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	f003 020f 	and.w	r2, r3, #15
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	3338      	adds	r3, #56	; 0x38
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2201      	movs	r2, #1
 8001c74:	705a      	strb	r2, [r3, #1]
 8001c76:	e00f      	b.n	8001c98 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	f003 020f 	and.w	r2, r3, #15
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	1a9b      	subs	r3, r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3304      	adds	r3, #4
 8001c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c9e:	78fb      	ldrb	r3, [r7, #3]
 8001ca0:	f003 030f 	and.w	r3, r3, #15
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_PCD_EP_ClrStall+0x86>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e00e      	b.n	8001cd6 <HAL_PCD_EP_ClrStall+0xa4>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68f9      	ldr	r1, [r7, #12]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f001 ffc3 	bl	8003c52 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b08a      	sub	sp, #40	; 0x28
 8001ce2:	af02      	add	r7, sp, #8
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	1a9b      	subs	r3, r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	3338      	adds	r3, #56	; 0x38
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	3304      	adds	r3, #4
 8001d04:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	699a      	ldr	r2, [r3, #24]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d901      	bls.n	8001d16 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e06c      	b.n	8001df0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	69fa      	ldr	r2, [r7, #28]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d902      	bls.n	8001d32 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3303      	adds	r3, #3
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d3a:	e02b      	b.n	8001d94 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d902      	bls.n	8001d58 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	3303      	adds	r3, #3
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	68d9      	ldr	r1, [r3, #12]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	4603      	mov	r3, r0
 8001d76:	6978      	ldr	r0, [r7, #20]
 8001d78:	f001 fe67 	bl	8003a4a <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	441a      	add	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	699a      	ldr	r2, [r3, #24]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	441a      	add	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	015a      	lsls	r2, r3, #5
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d809      	bhi.n	8001dbe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	699a      	ldr	r2, [r3, #24]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d203      	bcs.n	8001dbe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1be      	bne.n	8001d3c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d811      	bhi.n	8001dee <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	f003 030f 	and.w	r3, r3, #15
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	6939      	ldr	r1, [r7, #16]
 8001de6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001dea:	4013      	ands	r3, r2
 8001dec:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3720      	adds	r7, #32
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	333c      	adds	r3, #60	; 0x3c
 8001e10:	3304      	adds	r3, #4
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	f040 80a0 	bne.w	8001f70 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d015      	beq.n	8001e66 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4a72      	ldr	r2, [pc, #456]	; (8002008 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	f240 80dd 	bls.w	8001ffe <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80d7 	beq.w	8001ffe <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	015a      	lsls	r2, r3, #5
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e62:	6093      	str	r3, [r2, #8]
 8001e64:	e0cb      	b.n	8001ffe <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f003 0320 	and.w	r3, r3, #32
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d009      	beq.n	8001e84 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	015a      	lsls	r2, r3, #5
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	2320      	movs	r3, #32
 8001e80:	6093      	str	r3, [r2, #8]
 8001e82:	e0bc      	b.n	8001ffe <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 80b7 	bne.w	8001ffe <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4a5d      	ldr	r2, [pc, #372]	; (8002008 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d90f      	bls.n	8001eb8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00a      	beq.n	8001eb8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	015a      	lsls	r2, r3, #5
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eae:	461a      	mov	r2, r3
 8001eb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eb4:	6093      	str	r3, [r2, #8]
 8001eb6:	e0a2      	b.n	8001ffe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001eca:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	0159      	lsls	r1, r3, #5
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	440b      	add	r3, r1
 8001ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001ede:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4403      	add	r3, r0
 8001eee:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001ef2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f06:	6819      	ldr	r1, [r3, #0]
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4403      	add	r3, r0
 8001f16:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4419      	add	r1, r3
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	1a9b      	subs	r3, r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4403      	add	r3, r0
 8001f2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f30:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d114      	bne.n	8001f62 <PCD_EP_OutXfrComplete_int+0x16a>
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	1a9b      	subs	r3, r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d108      	bne.n	8001f62 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	f002 f80b 	bl	8003f78 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	4619      	mov	r1, r3
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f003 ff91 	bl	8005e90 <HAL_PCD_DataOutStageCallback>
 8001f6e:	e046      	b.n	8001ffe <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4a26      	ldr	r2, [pc, #152]	; (800200c <PCD_EP_OutXfrComplete_int+0x214>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d124      	bne.n	8001fc2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f94:	6093      	str	r3, [r2, #8]
 8001f96:	e032      	b.n	8001ffe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f003 0320 	and.w	r3, r3, #32
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d008      	beq.n	8001fb4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	015a      	lsls	r2, r3, #5
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fae:	461a      	mov	r2, r3
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	4619      	mov	r1, r3
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f003 ff68 	bl	8005e90 <HAL_PCD_DataOutStageCallback>
 8001fc0:	e01d      	b.n	8001ffe <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d114      	bne.n	8001ff2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d108      	bne.n	8001ff2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fea:	461a      	mov	r2, r3
 8001fec:	2100      	movs	r1, #0
 8001fee:	f001 ffc3 	bl	8003f78 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f003 ff49 	bl	8005e90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	4f54300a 	.word	0x4f54300a
 800200c:	4f54310a 	.word	0x4f54310a

08002010 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	333c      	adds	r3, #60	; 0x3c
 8002028:	3304      	adds	r3, #4
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4a15      	ldr	r2, [pc, #84]	; (8002098 <PCD_EP_OutSetupPacket_int+0x88>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d90e      	bls.n	8002064 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800204c:	2b00      	cmp	r3, #0
 800204e:	d009      	beq.n	8002064 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4413      	add	r3, r2
 8002058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800205c:	461a      	mov	r2, r3
 800205e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002062:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f003 ff01 	bl	8005e6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <PCD_EP_OutSetupPacket_int+0x88>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d90c      	bls.n	800208c <PCD_EP_OutSetupPacket_int+0x7c>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d108      	bne.n	800208c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002084:	461a      	mov	r2, r3
 8002086:	2101      	movs	r1, #1
 8002088:	f001 ff76 	bl	8003f78 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	4f54300a 	.word	0x4f54300a

0800209c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	70fb      	strb	r3, [r7, #3]
 80020a8:	4613      	mov	r3, r2
 80020aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d107      	bne.n	80020ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80020ba:	883b      	ldrh	r3, [r7, #0]
 80020bc:	0419      	lsls	r1, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28
 80020c8:	e028      	b.n	800211c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	0c1b      	lsrs	r3, r3, #16
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	4413      	add	r3, r2
 80020d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	e00d      	b.n	80020fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	3340      	adds	r3, #64	; 0x40
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	0c1b      	lsrs	r3, r3, #16
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	4413      	add	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	3301      	adds	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
 80020fa:	7bfa      	ldrb	r2, [r7, #15]
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	3b01      	subs	r3, #1
 8002100:	429a      	cmp	r2, r3
 8002102:	d3ec      	bcc.n	80020de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002104:	883b      	ldrh	r3, [r7, #0]
 8002106:	0418      	lsls	r0, r3, #16
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6819      	ldr	r1, [r3, #0]
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	3b01      	subs	r3, #1
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	4302      	orrs	r2, r0
 8002114:	3340      	adds	r3, #64	; 0x40
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	887a      	ldrh	r2, [r7, #2]
 800213c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e264      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d075      	beq.n	800226e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002182:	4ba3      	ldr	r3, [pc, #652]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b04      	cmp	r3, #4
 800218c:	d00c      	beq.n	80021a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218e:	4ba0      	ldr	r3, [pc, #640]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002196:	2b08      	cmp	r3, #8
 8002198:	d112      	bne.n	80021c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800219a:	4b9d      	ldr	r3, [pc, #628]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021a6:	d10b      	bne.n	80021c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a8:	4b99      	ldr	r3, [pc, #612]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d05b      	beq.n	800226c <HAL_RCC_OscConfig+0x108>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d157      	bne.n	800226c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e23f      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c8:	d106      	bne.n	80021d8 <HAL_RCC_OscConfig+0x74>
 80021ca:	4b91      	ldr	r3, [pc, #580]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a90      	ldr	r2, [pc, #576]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e01d      	b.n	8002214 <HAL_RCC_OscConfig+0xb0>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0x98>
 80021e2:	4b8b      	ldr	r3, [pc, #556]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a8a      	ldr	r2, [pc, #552]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b88      	ldr	r3, [pc, #544]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a87      	ldr	r2, [pc, #540]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e00b      	b.n	8002214 <HAL_RCC_OscConfig+0xb0>
 80021fc:	4b84      	ldr	r3, [pc, #528]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a83      	ldr	r2, [pc, #524]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	4b81      	ldr	r3, [pc, #516]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a80      	ldr	r2, [pc, #512]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 800220e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d013      	beq.n	8002244 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe fb40 	bl	80008a0 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002224:	f7fe fb3c 	bl	80008a0 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e204      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	4b76      	ldr	r3, [pc, #472]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0xc0>
 8002242:	e014      	b.n	800226e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7fe fb2c 	bl	80008a0 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224c:	f7fe fb28 	bl	80008a0 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e1f0      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	4b6c      	ldr	r3, [pc, #432]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0xe8>
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d063      	beq.n	8002342 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800227a:	4b65      	ldr	r3, [pc, #404]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00b      	beq.n	800229e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002286:	4b62      	ldr	r3, [pc, #392]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800228e:	2b08      	cmp	r3, #8
 8002290:	d11c      	bne.n	80022cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002292:	4b5f      	ldr	r3, [pc, #380]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d116      	bne.n	80022cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229e:	4b5c      	ldr	r3, [pc, #368]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <HAL_RCC_OscConfig+0x152>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d001      	beq.n	80022b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e1c4      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b6:	4b56      	ldr	r3, [pc, #344]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4952      	ldr	r1, [pc, #328]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ca:	e03a      	b.n	8002342 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d020      	beq.n	8002316 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d4:	4b4f      	ldr	r3, [pc, #316]	; (8002414 <HAL_RCC_OscConfig+0x2b0>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022da:	f7fe fae1 	bl	80008a0 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e2:	f7fe fadd 	bl	80008a0 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e1a5      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f4:	4b46      	ldr	r3, [pc, #280]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002300:	4b43      	ldr	r3, [pc, #268]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4940      	ldr	r1, [pc, #256]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	4313      	orrs	r3, r2
 8002312:	600b      	str	r3, [r1, #0]
 8002314:	e015      	b.n	8002342 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002316:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <HAL_RCC_OscConfig+0x2b0>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe fac0 	bl	80008a0 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002324:	f7fe fabc 	bl	80008a0 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e184      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	4b36      	ldr	r3, [pc, #216]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d030      	beq.n	80023b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d016      	beq.n	8002384 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002356:	4b30      	ldr	r3, [pc, #192]	; (8002418 <HAL_RCC_OscConfig+0x2b4>)
 8002358:	2201      	movs	r2, #1
 800235a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235c:	f7fe faa0 	bl	80008a0 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002364:	f7fe fa9c 	bl	80008a0 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e164      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002376:	4b26      	ldr	r3, [pc, #152]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0x200>
 8002382:	e015      	b.n	80023b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002384:	4b24      	ldr	r3, [pc, #144]	; (8002418 <HAL_RCC_OscConfig+0x2b4>)
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238a:	f7fe fa89 	bl	80008a0 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002392:	f7fe fa85 	bl	80008a0 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e14d      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a4:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80023a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f0      	bne.n	8002392 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80a0 	beq.w	80024fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c2:	4b13      	ldr	r3, [pc, #76]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10f      	bne.n	80023ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ea:	2301      	movs	r3, #1
 80023ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_OscConfig+0x2b8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d121      	bne.n	800243e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_RCC_OscConfig+0x2b8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a07      	ldr	r2, [pc, #28]	; (800241c <HAL_RCC_OscConfig+0x2b8>)
 8002400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002406:	f7fe fa4b 	bl	80008a0 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	e011      	b.n	8002432 <HAL_RCC_OscConfig+0x2ce>
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800
 8002414:	42470000 	.word	0x42470000
 8002418:	42470e80 	.word	0x42470e80
 800241c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002420:	f7fe fa3e 	bl	80008a0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e106      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002432:	4b85      	ldr	r3, [pc, #532]	; (8002648 <HAL_RCC_OscConfig+0x4e4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d106      	bne.n	8002454 <HAL_RCC_OscConfig+0x2f0>
 8002446:	4b81      	ldr	r3, [pc, #516]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244a:	4a80      	ldr	r2, [pc, #512]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6713      	str	r3, [r2, #112]	; 0x70
 8002452:	e01c      	b.n	800248e <HAL_RCC_OscConfig+0x32a>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b05      	cmp	r3, #5
 800245a:	d10c      	bne.n	8002476 <HAL_RCC_OscConfig+0x312>
 800245c:	4b7b      	ldr	r3, [pc, #492]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	4a7a      	ldr	r2, [pc, #488]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	6713      	str	r3, [r2, #112]	; 0x70
 8002468:	4b78      	ldr	r3, [pc, #480]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	4a77      	ldr	r2, [pc, #476]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6713      	str	r3, [r2, #112]	; 0x70
 8002474:	e00b      	b.n	800248e <HAL_RCC_OscConfig+0x32a>
 8002476:	4b75      	ldr	r3, [pc, #468]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a74      	ldr	r2, [pc, #464]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
 8002482:	4b72      	ldr	r3, [pc, #456]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	4a71      	ldr	r2, [pc, #452]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 8002488:	f023 0304 	bic.w	r3, r3, #4
 800248c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d015      	beq.n	80024c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002496:	f7fe fa03 	bl	80008a0 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f7fe f9ff 	bl	80008a0 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e0c5      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b4:	4b65      	ldr	r3, [pc, #404]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ee      	beq.n	800249e <HAL_RCC_OscConfig+0x33a>
 80024c0:	e014      	b.n	80024ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c2:	f7fe f9ed 	bl	80008a0 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c8:	e00a      	b.n	80024e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f7fe f9e9 	bl	80008a0 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d8:	4293      	cmp	r3, r2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e0af      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e0:	4b5a      	ldr	r3, [pc, #360]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 80024e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1ee      	bne.n	80024ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d105      	bne.n	80024fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f2:	4b56      	ldr	r3, [pc, #344]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a55      	ldr	r2, [pc, #340]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 80024f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 809b 	beq.w	800263e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002508:	4b50      	ldr	r3, [pc, #320]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b08      	cmp	r3, #8
 8002512:	d05c      	beq.n	80025ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d141      	bne.n	80025a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251c:	4b4c      	ldr	r3, [pc, #304]	; (8002650 <HAL_RCC_OscConfig+0x4ec>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002522:	f7fe f9bd 	bl	80008a0 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252a:	f7fe f9b9 	bl	80008a0 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e081      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253c:	4b43      	ldr	r3, [pc, #268]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f0      	bne.n	800252a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69da      	ldr	r2, [r3, #28]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	019b      	lsls	r3, r3, #6
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	085b      	lsrs	r3, r3, #1
 8002560:	3b01      	subs	r3, #1
 8002562:	041b      	lsls	r3, r3, #16
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	061b      	lsls	r3, r3, #24
 800256c:	4937      	ldr	r1, [pc, #220]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002572:	4b37      	ldr	r3, [pc, #220]	; (8002650 <HAL_RCC_OscConfig+0x4ec>)
 8002574:	2201      	movs	r2, #1
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7fe f992 	bl	80008a0 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002580:	f7fe f98e 	bl	80008a0 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e056      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002592:	4b2e      	ldr	r3, [pc, #184]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x41c>
 800259e:	e04e      	b.n	800263e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a0:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <HAL_RCC_OscConfig+0x4ec>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7fe f97b 	bl	80008a0 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ae:	f7fe f977 	bl	80008a0 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e03f      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c0:	4b22      	ldr	r3, [pc, #136]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x44a>
 80025cc:	e037      	b.n	800263e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e032      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025da:	4b1c      	ldr	r3, [pc, #112]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d028      	beq.n	800263a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d121      	bne.n	800263a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d11a      	bne.n	800263a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800260a:	4013      	ands	r3, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002610:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002612:	4293      	cmp	r3, r2
 8002614:	d111      	bne.n	800263a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	085b      	lsrs	r3, r3, #1
 8002622:	3b01      	subs	r3, #1
 8002624:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d107      	bne.n	800263a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d001      	beq.n	800263e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40007000 	.word	0x40007000
 800264c:	40023800 	.word	0x40023800
 8002650:	42470060 	.word	0x42470060

08002654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0cc      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002668:	4b68      	ldr	r3, [pc, #416]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d90c      	bls.n	8002690 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002676:	4b65      	ldr	r3, [pc, #404]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b63      	ldr	r3, [pc, #396]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d001      	beq.n	8002690 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0b8      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d020      	beq.n	80026de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a8:	4b59      	ldr	r3, [pc, #356]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	4a58      	ldr	r2, [pc, #352]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026c0:	4b53      	ldr	r3, [pc, #332]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a52      	ldr	r2, [pc, #328]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026cc:	4b50      	ldr	r3, [pc, #320]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	494d      	ldr	r1, [pc, #308]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d044      	beq.n	8002774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	4b47      	ldr	r3, [pc, #284]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d119      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e07f      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d003      	beq.n	8002712 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270e:	2b03      	cmp	r3, #3
 8002710:	d107      	bne.n	8002722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002712:	4b3f      	ldr	r3, [pc, #252]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e06f      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002722:	4b3b      	ldr	r3, [pc, #236]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e067      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002732:	4b37      	ldr	r3, [pc, #220]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f023 0203 	bic.w	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4934      	ldr	r1, [pc, #208]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	4313      	orrs	r3, r2
 8002742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002744:	f7fe f8ac 	bl	80008a0 <HAL_GetTick>
 8002748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274a:	e00a      	b.n	8002762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800274c:	f7fe f8a8 	bl	80008a0 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f241 3288 	movw	r2, #5000	; 0x1388
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e04f      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002762:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 020c 	and.w	r2, r3, #12
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	429a      	cmp	r2, r3
 8002772:	d1eb      	bne.n	800274c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002774:	4b25      	ldr	r3, [pc, #148]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d20c      	bcs.n	800279c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002782:	4b22      	ldr	r3, [pc, #136]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800278a:	4b20      	ldr	r3, [pc, #128]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e032      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4916      	ldr	r1, [pc, #88]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	490e      	ldr	r1, [pc, #56]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027da:	f000 f821 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 80027de:	4602      	mov	r2, r0
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	490a      	ldr	r1, [pc, #40]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	5ccb      	ldrb	r3, [r1, r3]
 80027ee:	fa22 f303 	lsr.w	r3, r2, r3
 80027f2:	4a09      	ldr	r2, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_ClockConfig+0x1c8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe f80c 	bl	8000818 <HAL_InitTick>

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40023c00 	.word	0x40023c00
 8002810:	40023800 	.word	0x40023800
 8002814:	0800649c 	.word	0x0800649c
 8002818:	20000000 	.word	0x20000000
 800281c:	20000004 	.word	0x20000004

08002820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002820:	b5b0      	push	{r4, r5, r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002826:	2100      	movs	r1, #0
 8002828:	6079      	str	r1, [r7, #4]
 800282a:	2100      	movs	r1, #0
 800282c:	60f9      	str	r1, [r7, #12]
 800282e:	2100      	movs	r1, #0
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002832:	2100      	movs	r1, #0
 8002834:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002836:	4952      	ldr	r1, [pc, #328]	; (8002980 <HAL_RCC_GetSysClockFreq+0x160>)
 8002838:	6889      	ldr	r1, [r1, #8]
 800283a:	f001 010c 	and.w	r1, r1, #12
 800283e:	2908      	cmp	r1, #8
 8002840:	d00d      	beq.n	800285e <HAL_RCC_GetSysClockFreq+0x3e>
 8002842:	2908      	cmp	r1, #8
 8002844:	f200 8094 	bhi.w	8002970 <HAL_RCC_GetSysClockFreq+0x150>
 8002848:	2900      	cmp	r1, #0
 800284a:	d002      	beq.n	8002852 <HAL_RCC_GetSysClockFreq+0x32>
 800284c:	2904      	cmp	r1, #4
 800284e:	d003      	beq.n	8002858 <HAL_RCC_GetSysClockFreq+0x38>
 8002850:	e08e      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002852:	4b4c      	ldr	r3, [pc, #304]	; (8002984 <HAL_RCC_GetSysClockFreq+0x164>)
 8002854:	60bb      	str	r3, [r7, #8]
       break;
 8002856:	e08e      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002858:	4b4b      	ldr	r3, [pc, #300]	; (8002988 <HAL_RCC_GetSysClockFreq+0x168>)
 800285a:	60bb      	str	r3, [r7, #8]
      break;
 800285c:	e08b      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800285e:	4948      	ldr	r1, [pc, #288]	; (8002980 <HAL_RCC_GetSysClockFreq+0x160>)
 8002860:	6849      	ldr	r1, [r1, #4]
 8002862:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002866:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002868:	4945      	ldr	r1, [pc, #276]	; (8002980 <HAL_RCC_GetSysClockFreq+0x160>)
 800286a:	6849      	ldr	r1, [r1, #4]
 800286c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002870:	2900      	cmp	r1, #0
 8002872:	d024      	beq.n	80028be <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002874:	4942      	ldr	r1, [pc, #264]	; (8002980 <HAL_RCC_GetSysClockFreq+0x160>)
 8002876:	6849      	ldr	r1, [r1, #4]
 8002878:	0989      	lsrs	r1, r1, #6
 800287a:	4608      	mov	r0, r1
 800287c:	f04f 0100 	mov.w	r1, #0
 8002880:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002884:	f04f 0500 	mov.w	r5, #0
 8002888:	ea00 0204 	and.w	r2, r0, r4
 800288c:	ea01 0305 	and.w	r3, r1, r5
 8002890:	493d      	ldr	r1, [pc, #244]	; (8002988 <HAL_RCC_GetSysClockFreq+0x168>)
 8002892:	fb01 f003 	mul.w	r0, r1, r3
 8002896:	2100      	movs	r1, #0
 8002898:	fb01 f102 	mul.w	r1, r1, r2
 800289c:	1844      	adds	r4, r0, r1
 800289e:	493a      	ldr	r1, [pc, #232]	; (8002988 <HAL_RCC_GetSysClockFreq+0x168>)
 80028a0:	fba2 0101 	umull	r0, r1, r2, r1
 80028a4:	1863      	adds	r3, r4, r1
 80028a6:	4619      	mov	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	461a      	mov	r2, r3
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	f7fd fc92 	bl	80001d8 <__aeabi_uldivmod>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4613      	mov	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	e04a      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028be:	4b30      	ldr	r3, [pc, #192]	; (8002980 <HAL_RCC_GetSysClockFreq+0x160>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	099b      	lsrs	r3, r3, #6
 80028c4:	461a      	mov	r2, r3
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028ce:	f04f 0100 	mov.w	r1, #0
 80028d2:	ea02 0400 	and.w	r4, r2, r0
 80028d6:	ea03 0501 	and.w	r5, r3, r1
 80028da:	4620      	mov	r0, r4
 80028dc:	4629      	mov	r1, r5
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	014b      	lsls	r3, r1, #5
 80028e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028ec:	0142      	lsls	r2, r0, #5
 80028ee:	4610      	mov	r0, r2
 80028f0:	4619      	mov	r1, r3
 80028f2:	1b00      	subs	r0, r0, r4
 80028f4:	eb61 0105 	sbc.w	r1, r1, r5
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	018b      	lsls	r3, r1, #6
 8002902:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002906:	0182      	lsls	r2, r0, #6
 8002908:	1a12      	subs	r2, r2, r0
 800290a:	eb63 0301 	sbc.w	r3, r3, r1
 800290e:	f04f 0000 	mov.w	r0, #0
 8002912:	f04f 0100 	mov.w	r1, #0
 8002916:	00d9      	lsls	r1, r3, #3
 8002918:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800291c:	00d0      	lsls	r0, r2, #3
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	1912      	adds	r2, r2, r4
 8002924:	eb45 0303 	adc.w	r3, r5, r3
 8002928:	f04f 0000 	mov.w	r0, #0
 800292c:	f04f 0100 	mov.w	r1, #0
 8002930:	0299      	lsls	r1, r3, #10
 8002932:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002936:	0290      	lsls	r0, r2, #10
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	461a      	mov	r2, r3
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	f7fd fc46 	bl	80001d8 <__aeabi_uldivmod>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4613      	mov	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002954:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <HAL_RCC_GetSysClockFreq+0x160>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	3301      	adds	r3, #1
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	60bb      	str	r3, [r7, #8]
      break;
 800296e:	e002      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <HAL_RCC_GetSysClockFreq+0x164>)
 8002972:	60bb      	str	r3, [r7, #8]
      break;
 8002974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002976:	68bb      	ldr	r3, [r7, #8]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bdb0      	pop	{r4, r5, r7, pc}
 8002980:	40023800 	.word	0x40023800
 8002984:	00f42400 	.word	0x00f42400
 8002988:	017d7840 	.word	0x017d7840

0800298c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002992:	681b      	ldr	r3, [r3, #0]
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000000 	.word	0x20000000

080029a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029a4:	b084      	sub	sp, #16
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	f107 001c 	add.w	r0, r7, #28
 80029b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80029b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d122      	bne.n	8002a02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80029d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80029e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d105      	bne.n	80029f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f001 fb1c 	bl	8004034 <USB_CoreReset>
 80029fc:	4603      	mov	r3, r0
 80029fe:	73fb      	strb	r3, [r7, #15]
 8002a00:	e01a      	b.n	8002a38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f001 fb10 	bl	8004034 <USB_CoreReset>
 8002a14:	4603      	mov	r3, r0
 8002a16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	639a      	str	r2, [r3, #56]	; 0x38
 8002a2a:	e005      	b.n	8002a38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d10b      	bne.n	8002a56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f043 0206 	orr.w	r2, r3, #6
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f043 0220 	orr.w	r2, r3, #32
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a62:	b004      	add	sp, #16
 8002a64:	4770      	bx	lr
	...

08002a68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	4613      	mov	r3, r2
 8002a74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d165      	bne.n	8002b48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4a41      	ldr	r2, [pc, #260]	; (8002b84 <USB_SetTurnaroundTime+0x11c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d906      	bls.n	8002a92 <USB_SetTurnaroundTime+0x2a>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4a40      	ldr	r2, [pc, #256]	; (8002b88 <USB_SetTurnaroundTime+0x120>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d202      	bcs.n	8002a92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002a8c:	230f      	movs	r3, #15
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	e062      	b.n	8002b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	4a3c      	ldr	r2, [pc, #240]	; (8002b88 <USB_SetTurnaroundTime+0x120>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d306      	bcc.n	8002aa8 <USB_SetTurnaroundTime+0x40>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4a3b      	ldr	r2, [pc, #236]	; (8002b8c <USB_SetTurnaroundTime+0x124>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d202      	bcs.n	8002aa8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002aa2:	230e      	movs	r3, #14
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	e057      	b.n	8002b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4a38      	ldr	r2, [pc, #224]	; (8002b8c <USB_SetTurnaroundTime+0x124>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d306      	bcc.n	8002abe <USB_SetTurnaroundTime+0x56>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4a37      	ldr	r2, [pc, #220]	; (8002b90 <USB_SetTurnaroundTime+0x128>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d202      	bcs.n	8002abe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002ab8:	230d      	movs	r3, #13
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	e04c      	b.n	8002b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	4a33      	ldr	r2, [pc, #204]	; (8002b90 <USB_SetTurnaroundTime+0x128>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d306      	bcc.n	8002ad4 <USB_SetTurnaroundTime+0x6c>
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4a32      	ldr	r2, [pc, #200]	; (8002b94 <USB_SetTurnaroundTime+0x12c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d802      	bhi.n	8002ad4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002ace:	230c      	movs	r3, #12
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	e041      	b.n	8002b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4a2f      	ldr	r2, [pc, #188]	; (8002b94 <USB_SetTurnaroundTime+0x12c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d906      	bls.n	8002aea <USB_SetTurnaroundTime+0x82>
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4a2e      	ldr	r2, [pc, #184]	; (8002b98 <USB_SetTurnaroundTime+0x130>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d802      	bhi.n	8002aea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002ae4:	230b      	movs	r3, #11
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	e036      	b.n	8002b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	4a2a      	ldr	r2, [pc, #168]	; (8002b98 <USB_SetTurnaroundTime+0x130>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d906      	bls.n	8002b00 <USB_SetTurnaroundTime+0x98>
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	4a29      	ldr	r2, [pc, #164]	; (8002b9c <USB_SetTurnaroundTime+0x134>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d802      	bhi.n	8002b00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002afa:	230a      	movs	r3, #10
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	e02b      	b.n	8002b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4a26      	ldr	r2, [pc, #152]	; (8002b9c <USB_SetTurnaroundTime+0x134>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d906      	bls.n	8002b16 <USB_SetTurnaroundTime+0xae>
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4a25      	ldr	r2, [pc, #148]	; (8002ba0 <USB_SetTurnaroundTime+0x138>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d202      	bcs.n	8002b16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002b10:	2309      	movs	r3, #9
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	e020      	b.n	8002b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <USB_SetTurnaroundTime+0x138>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d306      	bcc.n	8002b2c <USB_SetTurnaroundTime+0xc4>
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	4a20      	ldr	r2, [pc, #128]	; (8002ba4 <USB_SetTurnaroundTime+0x13c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d802      	bhi.n	8002b2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002b26:	2308      	movs	r3, #8
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	e015      	b.n	8002b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ba4 <USB_SetTurnaroundTime+0x13c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d906      	bls.n	8002b42 <USB_SetTurnaroundTime+0xda>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4a1c      	ldr	r2, [pc, #112]	; (8002ba8 <USB_SetTurnaroundTime+0x140>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d202      	bcs.n	8002b42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002b3c:	2307      	movs	r3, #7
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	e00a      	b.n	8002b58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002b42:	2306      	movs	r3, #6
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	e007      	b.n	8002b58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002b4e:	2309      	movs	r3, #9
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	e001      	b.n	8002b58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002b54:	2309      	movs	r3, #9
 8002b56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	029b      	lsls	r3, r3, #10
 8002b6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002b70:	431a      	orrs	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	00d8acbf 	.word	0x00d8acbf
 8002b88:	00e4e1c0 	.word	0x00e4e1c0
 8002b8c:	00f42400 	.word	0x00f42400
 8002b90:	01067380 	.word	0x01067380
 8002b94:	011a499f 	.word	0x011a499f
 8002b98:	01312cff 	.word	0x01312cff
 8002b9c:	014ca43f 	.word	0x014ca43f
 8002ba0:	016e3600 	.word	0x016e3600
 8002ba4:	01a6ab1f 	.word	0x01a6ab1f
 8002ba8:	01e84800 	.word	0x01e84800

08002bac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f043 0201 	orr.w	r2, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f023 0201 	bic.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d115      	bne.n	8002c3e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f7fd fe4a 	bl	80008b8 <HAL_Delay>
      ms++;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3301      	adds	r3, #1
 8002c28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f001 f972 	bl	8003f14 <USB_GetMode>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d01e      	beq.n	8002c74 <USB_SetCurrentMode+0x84>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b31      	cmp	r3, #49	; 0x31
 8002c3a:	d9f0      	bls.n	8002c1e <USB_SetCurrentMode+0x2e>
 8002c3c:	e01a      	b.n	8002c74 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d115      	bne.n	8002c70 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c50:	2001      	movs	r0, #1
 8002c52:	f7fd fe31 	bl	80008b8 <HAL_Delay>
      ms++;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f001 f959 	bl	8003f14 <USB_GetMode>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <USB_SetCurrentMode+0x84>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b31      	cmp	r3, #49	; 0x31
 8002c6c:	d9f0      	bls.n	8002c50 <USB_SetCurrentMode+0x60>
 8002c6e:	e001      	b.n	8002c74 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e005      	b.n	8002c80 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b32      	cmp	r3, #50	; 0x32
 8002c78:	d101      	bne.n	8002c7e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c88:	b084      	sub	sp, #16
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b086      	sub	sp, #24
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002c96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	e009      	b.n	8002cbc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	3340      	adds	r3, #64	; 0x40
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	2b0e      	cmp	r3, #14
 8002cc0:	d9f2      	bls.n	8002ca8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d11c      	bne.n	8002d02 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cd6:	f043 0302 	orr.w	r3, r3, #2
 8002cda:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	639a      	str	r2, [r3, #56]	; 0x38
 8002d00:	e00b      	b.n	8002d1a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d06:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d20:	461a      	mov	r2, r3
 8002d22:	2300      	movs	r3, #0
 8002d24:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d34:	461a      	mov	r2, r3
 8002d36:	680b      	ldr	r3, [r1, #0]
 8002d38:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d10c      	bne.n	8002d5a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d104      	bne.n	8002d50 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002d46:	2100      	movs	r1, #0
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f945 	bl	8002fd8 <USB_SetDevSpeed>
 8002d4e:	e008      	b.n	8002d62 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002d50:	2101      	movs	r1, #1
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f940 	bl	8002fd8 <USB_SetDevSpeed>
 8002d58:	e003      	b.n	8002d62 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002d5a:	2103      	movs	r1, #3
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f93b 	bl	8002fd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002d62:	2110      	movs	r1, #16
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f8f3 	bl	8002f50 <USB_FlushTxFifo>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f90f 	bl	8002f98 <USB_FlushRxFifo>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d96:	461a      	mov	r2, r3
 8002d98:	2300      	movs	r3, #0
 8002d9a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002da2:	461a      	mov	r2, r3
 8002da4:	2300      	movs	r3, #0
 8002da6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002da8:	2300      	movs	r3, #0
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	e043      	b.n	8002e36 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dc4:	d118      	bne.n	8002df8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10a      	bne.n	8002de2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dd8:	461a      	mov	r2, r3
 8002dda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	e013      	b.n	8002e0a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dee:	461a      	mov	r2, r3
 8002df0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e008      	b.n	8002e0a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e04:	461a      	mov	r2, r3
 8002e06:	2300      	movs	r3, #0
 8002e08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e16:	461a      	mov	r2, r3
 8002e18:	2300      	movs	r3, #0
 8002e1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e28:	461a      	mov	r2, r3
 8002e2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	3301      	adds	r3, #1
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d3b7      	bcc.n	8002dae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	e043      	b.n	8002ecc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e5a:	d118      	bne.n	8002e8e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10a      	bne.n	8002e78 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	015a      	lsls	r2, r3, #5
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	e013      	b.n	8002ea0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e84:	461a      	mov	r2, r3
 8002e86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	e008      	b.n	8002ea0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eac:	461a      	mov	r2, r3
 8002eae:	2300      	movs	r3, #0
 8002eb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ec4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d3b7      	bcc.n	8002e44 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ee2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ee6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002ef4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d105      	bne.n	8002f08 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f043 0210 	orr.w	r2, r3, #16
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699a      	ldr	r2, [r3, #24]
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <USB_DevInit+0x2c4>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f043 0208 	orr.w	r2, r3, #8
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d107      	bne.n	8002f3c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f34:	f043 0304 	orr.w	r3, r3, #4
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f48:	b004      	add	sp, #16
 8002f4a:	4770      	bx	lr
 8002f4c:	803c3800 	.word	0x803c3800

08002f50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	019b      	lsls	r3, r3, #6
 8002f62:	f043 0220 	orr.w	r2, r3, #32
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <USB_FlushTxFifo+0x44>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e006      	b.n	8002f88 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	d0f1      	beq.n	8002f6a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	00030d40 	.word	0x00030d40

08002f98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2210      	movs	r2, #16
 8002fa8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3301      	adds	r3, #1
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	4a08      	ldr	r2, [pc, #32]	; (8002fd4 <USB_FlushRxFifo+0x3c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e006      	b.n	8002fc8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b10      	cmp	r3, #16
 8002fc4:	d0f1      	beq.n	8002faa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	00030d40 	.word	0x00030d40

08002fd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	68f9      	ldr	r1, [r7, #12]
 8002ff4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800300a:	b480      	push	{r7}
 800300c:	b087      	sub	sp, #28
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0306 	and.w	r3, r3, #6
 8003022:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800302a:	2300      	movs	r3, #0
 800302c:	75fb      	strb	r3, [r7, #23]
 800302e:	e00a      	b.n	8003046 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d002      	beq.n	800303c <USB_GetDevSpeed+0x32>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2b06      	cmp	r3, #6
 800303a:	d102      	bne.n	8003042 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800303c:	2302      	movs	r3, #2
 800303e:	75fb      	strb	r3, [r7, #23]
 8003040:	e001      	b.n	8003046 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003042:	230f      	movs	r3, #15
 8003044:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003046:	7dfb      	ldrb	r3, [r7, #23]
}
 8003048:	4618      	mov	r0, r3
 800304a:	371c      	adds	r7, #28
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	785b      	ldrb	r3, [r3, #1]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d13a      	bne.n	80030e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	2101      	movs	r1, #1
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	b29b      	uxth	r3, r3
 8003088:	68f9      	ldr	r1, [r7, #12]
 800308a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800308e:	4313      	orrs	r3, r2
 8003090:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4413      	add	r3, r2
 800309a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d155      	bne.n	8003154 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	78db      	ldrb	r3, [r3, #3]
 80030c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80030c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	059b      	lsls	r3, r3, #22
 80030ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80030cc:	4313      	orrs	r3, r2
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	0151      	lsls	r1, r2, #5
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	440a      	add	r2, r1
 80030d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	e036      	b.n	8003154 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ec:	69da      	ldr	r2, [r3, #28]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	2101      	movs	r1, #1
 80030f8:	fa01 f303 	lsl.w	r3, r1, r3
 80030fc:	041b      	lsls	r3, r3, #16
 80030fe:	68f9      	ldr	r1, [r7, #12]
 8003100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003104:	4313      	orrs	r3, r2
 8003106:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4413      	add	r3, r2
 8003110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d11a      	bne.n	8003154 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4413      	add	r3, r2
 8003126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	78db      	ldrb	r3, [r3, #3]
 8003138:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800313a:	430b      	orrs	r3, r1
 800313c:	4313      	orrs	r3, r2
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	0151      	lsls	r1, r2, #5
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	440a      	add	r2, r1
 8003146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800314a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003152:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	785b      	ldrb	r3, [r3, #1]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d161      	bne.n	8003244 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4413      	add	r3, r2
 8003188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003192:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003196:	d11f      	bne.n	80031d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	0151      	lsls	r1, r2, #5
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	440a      	add	r2, r1
 80031ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	0151      	lsls	r1, r2, #5
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	440a      	add	r2, r1
 80031ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	2101      	movs	r1, #1
 80031ea:	fa01 f303 	lsl.w	r3, r1, r3
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	68f9      	ldr	r1, [r7, #12]
 80031f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031f8:	4013      	ands	r3, r2
 80031fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	2101      	movs	r1, #1
 800320e:	fa01 f303 	lsl.w	r3, r1, r3
 8003212:	b29b      	uxth	r3, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	68f9      	ldr	r1, [r7, #12]
 8003218:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800321c:	4013      	ands	r3, r2
 800321e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	0159      	lsls	r1, r3, #5
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	440b      	add	r3, r1
 8003236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800323a:	4619      	mov	r1, r3
 800323c:	4b35      	ldr	r3, [pc, #212]	; (8003314 <USB_DeactivateEndpoint+0x1b0>)
 800323e:	4013      	ands	r3, r2
 8003240:	600b      	str	r3, [r1, #0]
 8003242:	e060      	b.n	8003306 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800325a:	d11f      	bne.n	800329c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	0151      	lsls	r1, r2, #5
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	440a      	add	r2, r1
 8003272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003276:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800327a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4413      	add	r3, r2
 8003284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	0151      	lsls	r1, r2, #5
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	440a      	add	r2, r1
 8003292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003296:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800329a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	2101      	movs	r1, #1
 80032ae:	fa01 f303 	lsl.w	r3, r1, r3
 80032b2:	041b      	lsls	r3, r3, #16
 80032b4:	43db      	mvns	r3, r3
 80032b6:	68f9      	ldr	r1, [r7, #12]
 80032b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032bc:	4013      	ands	r3, r2
 80032be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c6:	69da      	ldr	r2, [r3, #28]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	2101      	movs	r1, #1
 80032d2:	fa01 f303 	lsl.w	r3, r1, r3
 80032d6:	041b      	lsls	r3, r3, #16
 80032d8:	43db      	mvns	r3, r3
 80032da:	68f9      	ldr	r1, [r7, #12]
 80032dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032e0:	4013      	ands	r3, r2
 80032e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	0159      	lsls	r1, r3, #5
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	440b      	add	r3, r1
 80032fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fe:	4619      	mov	r1, r3
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <USB_DeactivateEndpoint+0x1b4>)
 8003302:	4013      	ands	r3, r2
 8003304:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	ec337800 	.word	0xec337800
 8003318:	eff37800 	.word	0xeff37800

0800331c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	; 0x28
 8003320:	af02      	add	r7, sp, #8
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	4613      	mov	r3, r2
 8003328:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	785b      	ldrb	r3, [r3, #1]
 8003338:	2b01      	cmp	r3, #1
 800333a:	f040 815c 	bne.w	80035f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d132      	bne.n	80033ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	4413      	add	r3, r2
 800334e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	0151      	lsls	r1, r2, #5
 8003358:	69fa      	ldr	r2, [r7, #28]
 800335a:	440a      	add	r2, r1
 800335c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003360:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003364:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003368:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	4413      	add	r3, r2
 8003372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	0151      	lsls	r1, r2, #5
 800337c:	69fa      	ldr	r2, [r7, #28]
 800337e:	440a      	add	r2, r1
 8003380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003384:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003388:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	0151      	lsls	r1, r2, #5
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	440a      	add	r2, r1
 80033a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033a4:	0cdb      	lsrs	r3, r3, #19
 80033a6:	04db      	lsls	r3, r3, #19
 80033a8:	6113      	str	r3, [r2, #16]
 80033aa:	e074      	b.n	8003496 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	0151      	lsls	r1, r2, #5
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	440a      	add	r2, r1
 80033c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033c6:	0cdb      	lsrs	r3, r3, #19
 80033c8:	04db      	lsls	r3, r3, #19
 80033ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	0151      	lsls	r1, r2, #5
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	440a      	add	r2, r1
 80033e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80033ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80033ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033fc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	6959      	ldr	r1, [r3, #20]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	440b      	add	r3, r1
 8003408:	1e59      	subs	r1, r3, #1
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003412:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003414:	4b9d      	ldr	r3, [pc, #628]	; (800368c <USB_EPStartXfer+0x370>)
 8003416:	400b      	ands	r3, r1
 8003418:	69b9      	ldr	r1, [r7, #24]
 800341a:	0148      	lsls	r0, r1, #5
 800341c:	69f9      	ldr	r1, [r7, #28]
 800341e:	4401      	add	r1, r0
 8003420:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003424:	4313      	orrs	r3, r2
 8003426:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	4413      	add	r3, r2
 8003430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003434:	691a      	ldr	r2, [r3, #16]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343e:	69b9      	ldr	r1, [r7, #24]
 8003440:	0148      	lsls	r0, r1, #5
 8003442:	69f9      	ldr	r1, [r7, #28]
 8003444:	4401      	add	r1, r0
 8003446:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800344a:	4313      	orrs	r3, r2
 800344c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	78db      	ldrb	r3, [r3, #3]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d11f      	bne.n	8003496 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	0151      	lsls	r1, r2, #5
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	440a      	add	r2, r1
 800346c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003470:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003474:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	4413      	add	r3, r2
 800347e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	0151      	lsls	r1, r2, #5
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	440a      	add	r2, r1
 800348c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003490:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003494:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d14b      	bne.n	8003534 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d009      	beq.n	80034b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b0:	461a      	mov	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	78db      	ldrb	r3, [r3, #3]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d128      	bne.n	8003512 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d110      	bne.n	80034f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	0151      	lsls	r1, r2, #5
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	440a      	add	r2, r1
 80034e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	e00f      	b.n	8003512 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	0151      	lsls	r1, r2, #5
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	440a      	add	r2, r1
 8003508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800350c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003510:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	4413      	add	r3, r2
 800351a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	0151      	lsls	r1, r2, #5
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	440a      	add	r2, r1
 8003528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800352c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e12f      	b.n	8003794 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	0151      	lsls	r1, r2, #5
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	440a      	add	r2, r1
 800354a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800354e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003552:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	78db      	ldrb	r3, [r3, #3]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d015      	beq.n	8003588 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8117 	beq.w	8003794 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800356c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	2101      	movs	r1, #1
 8003578:	fa01 f303 	lsl.w	r3, r1, r3
 800357c:	69f9      	ldr	r1, [r7, #28]
 800357e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003582:	4313      	orrs	r3, r2
 8003584:	634b      	str	r3, [r1, #52]	; 0x34
 8003586:	e105      	b.n	8003794 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d110      	bne.n	80035ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	0151      	lsls	r1, r2, #5
 80035aa:	69fa      	ldr	r2, [r7, #28]
 80035ac:	440a      	add	r2, r1
 80035ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	e00f      	b.n	80035da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	0151      	lsls	r1, r2, #5
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	440a      	add	r2, r1
 80035d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	68d9      	ldr	r1, [r3, #12]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	781a      	ldrb	r2, [r3, #0]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	b298      	uxth	r0, r3
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	4603      	mov	r3, r0
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 fa2b 	bl	8003a4a <USB_WritePacket>
 80035f4:	e0ce      	b.n	8003794 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	0151      	lsls	r1, r2, #5
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	440a      	add	r2, r1
 800360c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003610:	0cdb      	lsrs	r3, r3, #19
 8003612:	04db      	lsls	r3, r3, #19
 8003614:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	0151      	lsls	r1, r2, #5
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	440a      	add	r2, r1
 800362c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003630:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003634:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003638:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d126      	bne.n	8003690 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003658:	69b9      	ldr	r1, [r7, #24]
 800365a:	0148      	lsls	r0, r1, #5
 800365c:	69f9      	ldr	r1, [r7, #28]
 800365e:	4401      	add	r1, r0
 8003660:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003664:	4313      	orrs	r3, r2
 8003666:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	0151      	lsls	r1, r2, #5
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	440a      	add	r2, r1
 800367e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003682:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003686:	6113      	str	r3, [r2, #16]
 8003688:	e036      	b.n	80036f8 <USB_EPStartXfer+0x3dc>
 800368a:	bf00      	nop
 800368c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	695a      	ldr	r2, [r3, #20]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4413      	add	r3, r2
 800369a:	1e5a      	subs	r2, r3, #1
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	8afb      	ldrh	r3, [r7, #22]
 80036b6:	04d9      	lsls	r1, r3, #19
 80036b8:	4b39      	ldr	r3, [pc, #228]	; (80037a0 <USB_EPStartXfer+0x484>)
 80036ba:	400b      	ands	r3, r1
 80036bc:	69b9      	ldr	r1, [r7, #24]
 80036be:	0148      	lsls	r0, r1, #5
 80036c0:	69f9      	ldr	r1, [r7, #28]
 80036c2:	4401      	add	r1, r0
 80036c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036c8:	4313      	orrs	r3, r2
 80036ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	8af9      	ldrh	r1, [r7, #22]
 80036e0:	fb01 f303 	mul.w	r3, r1, r3
 80036e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e8:	69b9      	ldr	r1, [r7, #24]
 80036ea:	0148      	lsls	r0, r1, #5
 80036ec:	69f9      	ldr	r1, [r7, #28]
 80036ee:	4401      	add	r1, r0
 80036f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036f4:	4313      	orrs	r3, r2
 80036f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d10d      	bne.n	800371a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	68d9      	ldr	r1, [r3, #12]
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003716:	460a      	mov	r2, r1
 8003718:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	78db      	ldrb	r3, [r3, #3]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d128      	bne.n	8003774 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d110      	bne.n	8003754 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	0151      	lsls	r1, r2, #5
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	440a      	add	r2, r1
 8003748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800374c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	e00f      	b.n	8003774 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	4413      	add	r3, r2
 800375c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	0151      	lsls	r1, r2, #5
 8003766:	69fa      	ldr	r2, [r7, #28]
 8003768:	440a      	add	r2, r1
 800376a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800376e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003772:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	4413      	add	r3, r2
 800377c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	0151      	lsls	r1, r2, #5
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	440a      	add	r2, r1
 800378a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800378e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003792:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3720      	adds	r7, #32
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	1ff80000 	.word	0x1ff80000

080037a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	4613      	mov	r3, r2
 80037b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	785b      	ldrb	r3, [r3, #1]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	f040 80cd 	bne.w	8003960 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d132      	bne.n	8003834 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	0151      	lsls	r1, r2, #5
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	440a      	add	r2, r1
 80037e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	015a      	lsls	r2, r3, #5
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	0151      	lsls	r1, r2, #5
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	440a      	add	r2, r1
 8003808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800380c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003810:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	0151      	lsls	r1, r2, #5
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	440a      	add	r2, r1
 8003828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800382c:	0cdb      	lsrs	r3, r3, #19
 800382e:	04db      	lsls	r3, r3, #19
 8003830:	6113      	str	r3, [r2, #16]
 8003832:	e04e      	b.n	80038d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	4413      	add	r3, r2
 800383c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	0151      	lsls	r1, r2, #5
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	440a      	add	r2, r1
 800384a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800384e:	0cdb      	lsrs	r3, r3, #19
 8003850:	04db      	lsls	r3, r3, #19
 8003852:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	0151      	lsls	r1, r2, #5
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	440a      	add	r2, r1
 800386a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800386e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003872:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003876:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	429a      	cmp	r2, r3
 8003882:	d903      	bls.n	800388c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	0151      	lsls	r1, r2, #5
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	440a      	add	r2, r1
 80038a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c2:	6939      	ldr	r1, [r7, #16]
 80038c4:	0148      	lsls	r0, r1, #5
 80038c6:	6979      	ldr	r1, [r7, #20]
 80038c8:	4401      	add	r1, r0
 80038ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80038ce:	4313      	orrs	r3, r2
 80038d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d11e      	bne.n	8003916 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d009      	beq.n	80038f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ec:	461a      	mov	r2, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	0151      	lsls	r1, r2, #5
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	440a      	add	r2, r1
 800390a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800390e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	e092      	b.n	8003a3c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	0151      	lsls	r1, r2, #5
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	440a      	add	r2, r1
 800392c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003930:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003934:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d07e      	beq.n	8003a3c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	2101      	movs	r1, #1
 8003950:	fa01 f303 	lsl.w	r3, r1, r3
 8003954:	6979      	ldr	r1, [r7, #20]
 8003956:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800395a:	4313      	orrs	r3, r2
 800395c:	634b      	str	r3, [r1, #52]	; 0x34
 800395e:	e06d      	b.n	8003a3c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	0151      	lsls	r1, r2, #5
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	440a      	add	r2, r1
 8003976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800397a:	0cdb      	lsrs	r3, r3, #19
 800397c:	04db      	lsls	r3, r3, #19
 800397e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	4413      	add	r3, r2
 8003988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	0151      	lsls	r1, r2, #5
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	440a      	add	r2, r1
 8003996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800399a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800399e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039a2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	0151      	lsls	r1, r2, #5
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	440a      	add	r2, r1
 80039ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ea:	6939      	ldr	r1, [r7, #16]
 80039ec:	0148      	lsls	r0, r1, #5
 80039ee:	6979      	ldr	r1, [r7, #20]
 80039f0:	4401      	add	r1, r0
 80039f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039f6:	4313      	orrs	r3, r2
 80039f8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d10d      	bne.n	8003a1c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d009      	beq.n	8003a1c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	68d9      	ldr	r1, [r3, #12]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a18:	460a      	mov	r2, r1
 8003a1a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	0151      	lsls	r1, r2, #5
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	440a      	add	r2, r1
 8003a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	371c      	adds	r7, #28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b089      	sub	sp, #36	; 0x24
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	4611      	mov	r1, r2
 8003a56:	461a      	mov	r2, r3
 8003a58:	460b      	mov	r3, r1
 8003a5a:	71fb      	strb	r3, [r7, #7]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003a68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d123      	bne.n	8003ab8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003a70:	88bb      	ldrh	r3, [r7, #4]
 8003a72:	3303      	adds	r3, #3
 8003a74:	089b      	lsrs	r3, r3, #2
 8003a76:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61bb      	str	r3, [r7, #24]
 8003a7c:	e018      	b.n	8003ab0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003a7e:	79fb      	ldrb	r3, [r7, #7]
 8003a80:	031a      	lsls	r2, r3, #12
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	3301      	adds	r3, #1
 8003a96:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	3301      	adds	r3, #1
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d3e2      	bcc.n	8003a7e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3724      	adds	r7, #36	; 0x24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b08b      	sub	sp, #44	; 0x2c
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003adc:	88fb      	ldrh	r3, [r7, #6]
 8003ade:	089b      	lsrs	r3, r3, #2
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003aec:	2300      	movs	r3, #0
 8003aee:	623b      	str	r3, [r7, #32]
 8003af0:	e014      	b.n	8003b1c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	601a      	str	r2, [r3, #0]
    pDest++;
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	3301      	adds	r3, #1
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	3301      	adds	r3, #1
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	3301      	adds	r3, #1
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	623b      	str	r3, [r7, #32]
 8003b1c:	6a3a      	ldr	r2, [r7, #32]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d3e6      	bcc.n	8003af2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003b24:	8bfb      	ldrh	r3, [r7, #30]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d01e      	beq.n	8003b68 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b34:	461a      	mov	r2, r3
 8003b36:	f107 0310 	add.w	r3, r7, #16
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	701a      	strb	r2, [r3, #0]
      i++;
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	3301      	adds	r3, #1
 8003b54:	623b      	str	r3, [r7, #32]
      pDest++;
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	3301      	adds	r3, #1
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003b5c:	8bfb      	ldrh	r3, [r7, #30]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003b62:	8bfb      	ldrh	r3, [r7, #30]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1ea      	bne.n	8003b3e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	372c      	adds	r7, #44	; 0x2c
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b085      	sub	sp, #20
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	785b      	ldrb	r3, [r3, #1]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d12c      	bne.n	8003bec <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	db12      	blt.n	8003bca <USB_EPSetStall+0x54>
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00f      	beq.n	8003bca <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	0151      	lsls	r1, r2, #5
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	440a      	add	r2, r1
 8003bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bc8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	0151      	lsls	r1, r2, #5
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	440a      	add	r2, r1
 8003be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003be4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e02b      	b.n	8003c44 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	db12      	blt.n	8003c24 <USB_EPSetStall+0xae>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00f      	beq.n	8003c24 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	0151      	lsls	r1, r2, #5
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	440a      	add	r2, r1
 8003c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c22:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	0151      	lsls	r1, r2, #5
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	440a      	add	r2, r1
 8003c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	785b      	ldrb	r3, [r3, #1]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d128      	bne.n	8003cc0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	0151      	lsls	r1, r2, #5
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	440a      	add	r2, r1
 8003c84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c8c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	78db      	ldrb	r3, [r3, #3]
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d003      	beq.n	8003c9e <USB_EPClearStall+0x4c>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	78db      	ldrb	r3, [r3, #3]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d138      	bne.n	8003d10 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	0151      	lsls	r1, r2, #5
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	440a      	add	r2, r1
 8003cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e027      	b.n	8003d10 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	0151      	lsls	r1, r2, #5
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	440a      	add	r2, r1
 8003cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cde:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	78db      	ldrb	r3, [r3, #3]
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d003      	beq.n	8003cf0 <USB_EPClearStall+0x9e>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	78db      	ldrb	r3, [r3, #3]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d10f      	bne.n	8003d10 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	0151      	lsls	r1, r2, #5
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	440a      	add	r2, r1
 8003d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	460b      	mov	r3, r1
 8003d28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d3c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d40:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	78fb      	ldrb	r3, [r7, #3]
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003d52:	68f9      	ldr	r1, [r7, #12]
 8003d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b085      	sub	sp, #20
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d84:	f023 0303 	bic.w	r3, r3, #3
 8003d88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d98:	f023 0302 	bic.w	r3, r3, #2
 8003d9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003dc6:	f023 0303 	bic.w	r3, r3, #3
 8003dca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dda:	f043 0302 	orr.w	r3, r3, #2
 8003dde:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b085      	sub	sp, #20
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4013      	ands	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003e06:	68fb      	ldr	r3, [r7, #12]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	4013      	ands	r3, r2
 8003e36:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	0c1b      	lsrs	r3, r3, #16
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	b29b      	uxth	r3, r3
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003e8c:	78fb      	ldrb	r3, [r7, #3]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee8:	01db      	lsls	r3, r3, #7
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4013      	ands	r3, r2
 8003f04:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f06:	68bb      	ldr	r3, [r7, #8]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	f003 0301 	and.w	r3, r3, #1
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f4a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003f4e:	f023 0307 	bic.w	r3, r3, #7
 8003f52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	460b      	mov	r3, r1
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	333c      	adds	r3, #60	; 0x3c
 8003f8e:	3304      	adds	r3, #4
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	4a26      	ldr	r2, [pc, #152]	; (8004030 <USB_EP0_OutStart+0xb8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d90a      	bls.n	8003fb2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fac:	d101      	bne.n	8003fb2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e037      	b.n	8004022 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb8:	461a      	mov	r2, r3
 8003fba:	2300      	movs	r3, #0
 8003fbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe0:	f043 0318 	orr.w	r3, r3, #24
 8003fe4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ff4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003ff8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003ffa:	7afb      	ldrb	r3, [r7, #11]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d10f      	bne.n	8004020 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004006:	461a      	mov	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800401a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800401e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	371c      	adds	r7, #28
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	4f54300a 	.word	0x4f54300a

08004034 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3301      	adds	r3, #1
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	4a13      	ldr	r2, [pc, #76]	; (8004094 <USB_CoreReset+0x60>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d901      	bls.n	8004050 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e01a      	b.n	8004086 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	2b00      	cmp	r3, #0
 8004056:	daf3      	bge.n	8004040 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f043 0201 	orr.w	r2, r3, #1
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	3301      	adds	r3, #1
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	4a09      	ldr	r2, [pc, #36]	; (8004094 <USB_CoreReset+0x60>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e006      	b.n	8004086 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b01      	cmp	r3, #1
 8004082:	d0f1      	beq.n	8004068 <USB_CoreReset+0x34>

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	00030d40 	.word	0x00030d40

08004098 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80040a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80040a8:	f002 f952 	bl	8006350 <USBD_static_malloc>
 80040ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d105      	bne.n	80040c0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80040bc:	2302      	movs	r3, #2
 80040be:	e066      	b.n	800418e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	7c1b      	ldrb	r3, [r3, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d119      	bne.n	8004104 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80040d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040d4:	2202      	movs	r2, #2
 80040d6:	2181      	movs	r1, #129	; 0x81
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f002 f816 	bl	800610a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80040e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040e8:	2202      	movs	r2, #2
 80040ea:	2101      	movs	r1, #1
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f002 f80c 	bl	800610a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2210      	movs	r2, #16
 80040fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004102:	e016      	b.n	8004132 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004104:	2340      	movs	r3, #64	; 0x40
 8004106:	2202      	movs	r2, #2
 8004108:	2181      	movs	r1, #129	; 0x81
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f001 fffd 	bl	800610a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004116:	2340      	movs	r3, #64	; 0x40
 8004118:	2202      	movs	r2, #2
 800411a:	2101      	movs	r1, #1
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f001 fff4 	bl	800610a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2210      	movs	r2, #16
 800412e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004132:	2308      	movs	r3, #8
 8004134:	2203      	movs	r2, #3
 8004136:	2182      	movs	r1, #130	; 0x82
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f001 ffe6 	bl	800610a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	7c1b      	ldrb	r3, [r3, #16]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d109      	bne.n	800417c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800416e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004172:	2101      	movs	r1, #1
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f002 f8b7 	bl	80062e8 <USBD_LL_PrepareReceive>
 800417a:	e007      	b.n	800418c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004182:	2340      	movs	r3, #64	; 0x40
 8004184:	2101      	movs	r1, #1
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f002 f8ae 	bl	80062e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b082      	sub	sp, #8
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80041a2:	2181      	movs	r1, #129	; 0x81
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f001 ffd6 	bl	8006156 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80041b0:	2101      	movs	r1, #1
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f001 ffcf 	bl	8006156 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80041c0:	2182      	movs	r1, #130	; 0x82
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f001 ffc7 	bl	8006156 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00e      	beq.n	8004200 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80041f2:	4618      	mov	r0, r3
 80041f4:	f002 f8ba 	bl	800636c <USBD_static_free>
    pdev->pClassData = NULL;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800421c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004230:	2303      	movs	r3, #3
 8004232:	e0af      	b.n	8004394 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800423c:	2b00      	cmp	r3, #0
 800423e:	d03f      	beq.n	80042c0 <USBD_CDC_Setup+0xb4>
 8004240:	2b20      	cmp	r3, #32
 8004242:	f040 809f 	bne.w	8004384 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	88db      	ldrh	r3, [r3, #6]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d02e      	beq.n	80042ac <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	b25b      	sxtb	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	da16      	bge.n	8004286 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004264:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	88d2      	ldrh	r2, [r2, #6]
 800426a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	88db      	ldrh	r3, [r3, #6]
 8004270:	2b07      	cmp	r3, #7
 8004272:	bf28      	it	cs
 8004274:	2307      	movcs	r3, #7
 8004276:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	89fa      	ldrh	r2, [r7, #14]
 800427c:	4619      	mov	r1, r3
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f001 fb19 	bl	80058b6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004284:	e085      	b.n	8004392 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	785a      	ldrb	r2, [r3, #1]
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	88db      	ldrh	r3, [r3, #6]
 8004294:	b2da      	uxtb	r2, r3
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800429c:	6939      	ldr	r1, [r7, #16]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	88db      	ldrh	r3, [r3, #6]
 80042a2:	461a      	mov	r2, r3
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f001 fb32 	bl	800590e <USBD_CtlPrepareRx>
      break;
 80042aa:	e072      	b.n	8004392 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	7850      	ldrb	r0, [r2, #1]
 80042b8:	2200      	movs	r2, #0
 80042ba:	6839      	ldr	r1, [r7, #0]
 80042bc:	4798      	blx	r3
      break;
 80042be:	e068      	b.n	8004392 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	2b0b      	cmp	r3, #11
 80042c6:	d852      	bhi.n	800436e <USBD_CDC_Setup+0x162>
 80042c8:	a201      	add	r2, pc, #4	; (adr r2, 80042d0 <USBD_CDC_Setup+0xc4>)
 80042ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ce:	bf00      	nop
 80042d0:	08004301 	.word	0x08004301
 80042d4:	0800437d 	.word	0x0800437d
 80042d8:	0800436f 	.word	0x0800436f
 80042dc:	0800436f 	.word	0x0800436f
 80042e0:	0800436f 	.word	0x0800436f
 80042e4:	0800436f 	.word	0x0800436f
 80042e8:	0800436f 	.word	0x0800436f
 80042ec:	0800436f 	.word	0x0800436f
 80042f0:	0800436f 	.word	0x0800436f
 80042f4:	0800436f 	.word	0x0800436f
 80042f8:	0800432b 	.word	0x0800432b
 80042fc:	08004355 	.word	0x08004355
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b03      	cmp	r3, #3
 800430a:	d107      	bne.n	800431c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800430c:	f107 030a 	add.w	r3, r7, #10
 8004310:	2202      	movs	r2, #2
 8004312:	4619      	mov	r1, r3
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f001 face 	bl	80058b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800431a:	e032      	b.n	8004382 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800431c:	6839      	ldr	r1, [r7, #0]
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f001 fa58 	bl	80057d4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004324:	2303      	movs	r3, #3
 8004326:	75fb      	strb	r3, [r7, #23]
          break;
 8004328:	e02b      	b.n	8004382 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b03      	cmp	r3, #3
 8004334:	d107      	bne.n	8004346 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004336:	f107 030d 	add.w	r3, r7, #13
 800433a:	2201      	movs	r2, #1
 800433c:	4619      	mov	r1, r3
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f001 fab9 	bl	80058b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004344:	e01d      	b.n	8004382 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004346:	6839      	ldr	r1, [r7, #0]
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f001 fa43 	bl	80057d4 <USBD_CtlError>
            ret = USBD_FAIL;
 800434e:	2303      	movs	r3, #3
 8004350:	75fb      	strb	r3, [r7, #23]
          break;
 8004352:	e016      	b.n	8004382 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b03      	cmp	r3, #3
 800435e:	d00f      	beq.n	8004380 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004360:	6839      	ldr	r1, [r7, #0]
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f001 fa36 	bl	80057d4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004368:	2303      	movs	r3, #3
 800436a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800436c:	e008      	b.n	8004380 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800436e:	6839      	ldr	r1, [r7, #0]
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f001 fa2f 	bl	80057d4 <USBD_CtlError>
          ret = USBD_FAIL;
 8004376:	2303      	movs	r3, #3
 8004378:	75fb      	strb	r3, [r7, #23]
          break;
 800437a:	e002      	b.n	8004382 <USBD_CDC_Setup+0x176>
          break;
 800437c:	bf00      	nop
 800437e:	e008      	b.n	8004392 <USBD_CDC_Setup+0x186>
          break;
 8004380:	bf00      	nop
      }
      break;
 8004382:	e006      	b.n	8004392 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004384:	6839      	ldr	r1, [r7, #0]
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f001 fa24 	bl	80057d4 <USBD_CtlError>
      ret = USBD_FAIL;
 800438c:	2303      	movs	r3, #3
 800438e:	75fb      	strb	r3, [r7, #23]
      break;
 8004390:	bf00      	nop
  }

  return (uint8_t)ret;
 8004392:	7dfb      	ldrb	r3, [r7, #23]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80043ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e04f      	b.n	800445e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80043c6:	78fa      	ldrb	r2, [r7, #3]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	3318      	adds	r3, #24
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d029      	beq.n	8004430 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	3318      	adds	r3, #24
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	78f9      	ldrb	r1, [r7, #3]
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	460b      	mov	r3, r1
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	1a5b      	subs	r3, r3, r1
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4403      	add	r3, r0
 80043fc:	3344      	adds	r3, #68	; 0x44
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	fbb2 f1f3 	udiv	r1, r2, r3
 8004404:	fb03 f301 	mul.w	r3, r3, r1
 8004408:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800440a:	2b00      	cmp	r3, #0
 800440c:	d110      	bne.n	8004430 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800440e:	78fa      	ldrb	r2, [r7, #3]
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	3318      	adds	r3, #24
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004422:	78f9      	ldrb	r1, [r7, #3]
 8004424:	2300      	movs	r3, #0
 8004426:	2200      	movs	r2, #0
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f001 ff3c 	bl	80062a6 <USBD_LL_Transmit>
 800442e:	e015      	b.n	800445c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2200      	movs	r2, #0
 8004434:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00b      	beq.n	800445c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	460b      	mov	r3, r1
 8004470:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004478:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004484:	2303      	movs	r3, #3
 8004486:	e015      	b.n	80044b4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	4619      	mov	r1, r3
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f001 ff4c 	bl	800632a <USBD_LL_GetRxDataSize>
 8004492:	4602      	mov	r2, r0
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80044ae:	4611      	mov	r1, r2
 80044b0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044ca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e01b      	b.n	800450e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d015      	beq.n	800450c <USBD_CDC_EP0_RxReady+0x50>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80044e6:	2bff      	cmp	r3, #255	; 0xff
 80044e8:	d010      	beq.n	800450c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80044f8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004500:	b292      	uxth	r2, r2
 8004502:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	22ff      	movs	r2, #255	; 0xff
 8004508:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2243      	movs	r2, #67	; 0x43
 8004524:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004526:	4b03      	ldr	r3, [pc, #12]	; (8004534 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004528:	4618      	mov	r0, r3
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	20000094 	.word	0x20000094

08004538 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2243      	movs	r2, #67	; 0x43
 8004544:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004546:	4b03      	ldr	r3, [pc, #12]	; (8004554 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	20000050 	.word	0x20000050

08004558 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2243      	movs	r2, #67	; 0x43
 8004564:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004566:	4b03      	ldr	r3, [pc, #12]	; (8004574 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004568:	4618      	mov	r0, r3
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	200000d8 	.word	0x200000d8

08004578 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	220a      	movs	r2, #10
 8004584:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004586:	4b03      	ldr	r3, [pc, #12]	; (8004594 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	2000000c 	.word	0x2000000c

08004598 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e004      	b.n	80045b6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b087      	sub	sp, #28
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045d4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80045dc:	2303      	movs	r3, #3
 80045de:	e008      	b.n	80045f2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80045fe:	b480      	push	{r7}
 8004600:	b085      	sub	sp, #20
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800460e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004616:	2303      	movs	r3, #3
 8004618:	e004      	b.n	8004624 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800463e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004640:	2301      	movs	r3, #1
 8004642:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800464e:	2303      	movs	r3, #3
 8004650:	e01a      	b.n	8004688 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004658:	2b00      	cmp	r3, #0
 800465a:	d114      	bne.n	8004686 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2201      	movs	r2, #1
 8004660:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800467a:	2181      	movs	r1, #129	; 0x81
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f001 fe12 	bl	80062a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004686:	7bfb      	ldrb	r3, [r7, #15]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800469e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e016      	b.n	80046dc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	7c1b      	ldrb	r3, [r3, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d109      	bne.n	80046ca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046c0:	2101      	movs	r1, #1
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f001 fe10 	bl	80062e8 <USBD_LL_PrepareReceive>
 80046c8:	e007      	b.n	80046da <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046d0:	2340      	movs	r3, #64	; 0x40
 80046d2:	2101      	movs	r1, #1
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f001 fe07 	bl	80062e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	4613      	mov	r3, r2
 80046f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e01f      	b.n	800473c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	79fa      	ldrb	r2, [r7, #7]
 800472e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f001 fc83 	bl	800603c <USBD_LL_Init>
 8004736:	4603      	mov	r3, r0
 8004738:	75fb      	strb	r3, [r7, #23]

  return ret;
 800473a:	7dfb      	ldrb	r3, [r7, #23]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004758:	2303      	movs	r3, #3
 800475a:	e016      	b.n	800478a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00b      	beq.n	8004788 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	f107 020e 	add.w	r2, r7, #14
 800477c:	4610      	mov	r0, r2
 800477e:	4798      	blx	r3
 8004780:	4602      	mov	r2, r0
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f001 fc9a 	bl	80060d4 <USBD_LL_Start>
 80047a0:	4603      	mov	r3, r0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80047cc:	2303      	movs	r3, #3
 80047ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d009      	beq.n	80047ee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	78fa      	ldrb	r2, [r7, #3]
 80047e4:	4611      	mov	r1, r2
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	4798      	blx	r3
 80047ea:	4603      	mov	r3, r0
 80047ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d007      	beq.n	800481e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	78fa      	ldrb	r2, [r7, #3]
 8004818:	4611      	mov	r1, r2
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	4798      	blx	r3
  }

  return USBD_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004838:	6839      	ldr	r1, [r7, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f000 ff90 	bl	8005760 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800484e:	461a      	mov	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800485c:	f003 031f 	and.w	r3, r3, #31
 8004860:	2b02      	cmp	r3, #2
 8004862:	d01a      	beq.n	800489a <USBD_LL_SetupStage+0x72>
 8004864:	2b02      	cmp	r3, #2
 8004866:	d822      	bhi.n	80048ae <USBD_LL_SetupStage+0x86>
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <USBD_LL_SetupStage+0x4a>
 800486c:	2b01      	cmp	r3, #1
 800486e:	d00a      	beq.n	8004886 <USBD_LL_SetupStage+0x5e>
 8004870:	e01d      	b.n	80048ae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004878:	4619      	mov	r1, r3
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fa62 	bl	8004d44 <USBD_StdDevReq>
 8004880:	4603      	mov	r3, r0
 8004882:	73fb      	strb	r3, [r7, #15]
      break;
 8004884:	e020      	b.n	80048c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800488c:	4619      	mov	r1, r3
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fac6 	bl	8004e20 <USBD_StdItfReq>
 8004894:	4603      	mov	r3, r0
 8004896:	73fb      	strb	r3, [r7, #15]
      break;
 8004898:	e016      	b.n	80048c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80048a0:	4619      	mov	r1, r3
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fb05 	bl	8004eb2 <USBD_StdEPReq>
 80048a8:	4603      	mov	r3, r0
 80048aa:	73fb      	strb	r3, [r7, #15]
      break;
 80048ac:	e00c      	b.n	80048c8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80048b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	4619      	mov	r1, r3
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f001 fc69 	bl	8006194 <USBD_LL_StallEP>
 80048c2:	4603      	mov	r3, r0
 80048c4:	73fb      	strb	r3, [r7, #15]
      break;
 80048c6:	bf00      	nop
  }

  return ret;
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b086      	sub	sp, #24
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	460b      	mov	r3, r1
 80048dc:	607a      	str	r2, [r7, #4]
 80048de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80048e0:	7afb      	ldrb	r3, [r7, #11]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d138      	bne.n	8004958 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80048ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d14a      	bne.n	800498e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	429a      	cmp	r2, r3
 8004902:	d913      	bls.n	800492c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	1ad2      	subs	r2, r2, r3
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	4293      	cmp	r3, r2
 800491c:	bf28      	it	cs
 800491e:	4613      	movcs	r3, r2
 8004920:	461a      	mov	r2, r3
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f001 f80f 	bl	8005948 <USBD_CtlContinueRx>
 800492a:	e030      	b.n	800498e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b03      	cmp	r3, #3
 8004936:	d10b      	bne.n	8004950 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f001 f80a 	bl	800596a <USBD_CtlSendStatus>
 8004956:	e01a      	b.n	800498e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b03      	cmp	r3, #3
 8004962:	d114      	bne.n	800498e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00e      	beq.n	800498e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	7afa      	ldrb	r2, [r7, #11]
 800497a:	4611      	mov	r1, r2
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	4798      	blx	r3
 8004980:	4603      	mov	r3, r0
 8004982:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004984:	7dfb      	ldrb	r3, [r7, #23]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800498a:	7dfb      	ldrb	r3, [r7, #23]
 800498c:	e000      	b.n	8004990 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	460b      	mov	r3, r1
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80049a6:	7afb      	ldrb	r3, [r7, #11]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d16b      	bne.n	8004a84 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3314      	adds	r3, #20
 80049b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d156      	bne.n	8004a6a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d914      	bls.n	80049f2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	1ad2      	subs	r2, r2, r3
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	461a      	mov	r2, r3
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 ff84 	bl	80058ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80049e4:	2300      	movs	r3, #0
 80049e6:	2200      	movs	r2, #0
 80049e8:	2100      	movs	r1, #0
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f001 fc7c 	bl	80062e8 <USBD_LL_PrepareReceive>
 80049f0:	e03b      	b.n	8004a6a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d11c      	bne.n	8004a38 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d316      	bcc.n	8004a38 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d20f      	bcs.n	8004a38 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 ff65 	bl	80058ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2100      	movs	r1, #0
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f001 fc59 	bl	80062e8 <USBD_LL_PrepareReceive>
 8004a36:	e018      	b.n	8004a6a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d10b      	bne.n	8004a5c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d005      	beq.n	8004a5c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004a5c:	2180      	movs	r1, #128	; 0x80
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f001 fb98 	bl	8006194 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 ff93 	bl	8005990 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d122      	bne.n	8004aba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f7ff fe98 	bl	80047aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004a82:	e01a      	b.n	8004aba <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d114      	bne.n	8004aba <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00e      	beq.n	8004aba <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	7afa      	ldrb	r2, [r7, #11]
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	4798      	blx	r3
 8004aac:	4603      	mov	r3, r0
 8004aae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004ab0:	7dfb      	ldrb	r3, [r7, #23]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004ab6:	7dfb      	ldrb	r3, [r7, #23]
 8004ab8:	e000      	b.n	8004abc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e02f      	b.n	8004b58 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00f      	beq.n	8004b22 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d009      	beq.n	8004b22 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6852      	ldr	r2, [r2, #4]
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b22:	2340      	movs	r3, #64	; 0x40
 8004b24:	2200      	movs	r2, #0
 8004b26:	2100      	movs	r1, #0
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f001 faee 	bl	800610a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2240      	movs	r2, #64	; 0x40
 8004b3a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b3e:	2340      	movs	r3, #64	; 0x40
 8004b40:	2200      	movs	r2, #0
 8004b42:	2180      	movs	r1, #128	; 0x80
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f001 fae0 	bl	800610a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2240      	movs	r2, #64	; 0x40
 8004b54:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	78fa      	ldrb	r2, [r7, #3]
 8004b70:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2204      	movs	r2, #4
 8004b9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d106      	bne.n	8004bce <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e012      	b.n	8004c18 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d10b      	bne.n	8004c16 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e014      	b.n	8004c64 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d10d      	bne.n	8004c62 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d007      	beq.n	8004c62 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	460b      	mov	r3, r1
 8004c76:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e014      	b.n	8004cb0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b03      	cmp	r3, #3
 8004c90:	d10d      	bne.n	8004cae <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d007      	beq.n	8004cae <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	78fa      	ldrb	r2, [r7, #3]
 8004ca8:	4611      	mov	r1, r2
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b082      	sub	sp, #8
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d009      	beq.n	8004cfc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6852      	ldr	r2, [r2, #4]
 8004cf4:	b2d2      	uxtb	r2, r2
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	4798      	blx	r3
  }

  return USBD_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b087      	sub	sp, #28
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004d24:	8a3b      	ldrh	r3, [r7, #16]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	b21a      	sxth	r2, r3
 8004d2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	b21b      	sxth	r3, r3
 8004d32:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004d34:	89fb      	ldrh	r3, [r7, #14]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
	...

08004d44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d5a:	2b40      	cmp	r3, #64	; 0x40
 8004d5c:	d005      	beq.n	8004d6a <USBD_StdDevReq+0x26>
 8004d5e:	2b40      	cmp	r3, #64	; 0x40
 8004d60:	d853      	bhi.n	8004e0a <USBD_StdDevReq+0xc6>
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00b      	beq.n	8004d7e <USBD_StdDevReq+0x3a>
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	d14f      	bne.n	8004e0a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	6839      	ldr	r1, [r7, #0]
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	4798      	blx	r3
 8004d78:	4603      	mov	r3, r0
 8004d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d7c:	e04a      	b.n	8004e14 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	785b      	ldrb	r3, [r3, #1]
 8004d82:	2b09      	cmp	r3, #9
 8004d84:	d83b      	bhi.n	8004dfe <USBD_StdDevReq+0xba>
 8004d86:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <USBD_StdDevReq+0x48>)
 8004d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8c:	08004de1 	.word	0x08004de1
 8004d90:	08004df5 	.word	0x08004df5
 8004d94:	08004dff 	.word	0x08004dff
 8004d98:	08004deb 	.word	0x08004deb
 8004d9c:	08004dff 	.word	0x08004dff
 8004da0:	08004dbf 	.word	0x08004dbf
 8004da4:	08004db5 	.word	0x08004db5
 8004da8:	08004dff 	.word	0x08004dff
 8004dac:	08004dd7 	.word	0x08004dd7
 8004db0:	08004dc9 	.word	0x08004dc9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004db4:	6839      	ldr	r1, [r7, #0]
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f9de 	bl	8005178 <USBD_GetDescriptor>
          break;
 8004dbc:	e024      	b.n	8004e08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004dbe:	6839      	ldr	r1, [r7, #0]
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fb43 	bl	800544c <USBD_SetAddress>
          break;
 8004dc6:	e01f      	b.n	8004e08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004dc8:	6839      	ldr	r1, [r7, #0]
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fb82 	bl	80054d4 <USBD_SetConfig>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	73fb      	strb	r3, [r7, #15]
          break;
 8004dd4:	e018      	b.n	8004e08 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004dd6:	6839      	ldr	r1, [r7, #0]
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fc21 	bl	8005620 <USBD_GetConfig>
          break;
 8004dde:	e013      	b.n	8004e08 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004de0:	6839      	ldr	r1, [r7, #0]
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fc52 	bl	800568c <USBD_GetStatus>
          break;
 8004de8:	e00e      	b.n	8004e08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004dea:	6839      	ldr	r1, [r7, #0]
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fc81 	bl	80056f4 <USBD_SetFeature>
          break;
 8004df2:	e009      	b.n	8004e08 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004df4:	6839      	ldr	r1, [r7, #0]
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fc90 	bl	800571c <USBD_ClrFeature>
          break;
 8004dfc:	e004      	b.n	8004e08 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004dfe:	6839      	ldr	r1, [r7, #0]
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fce7 	bl	80057d4 <USBD_CtlError>
          break;
 8004e06:	bf00      	nop
      }
      break;
 8004e08:	e004      	b.n	8004e14 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8004e0a:	6839      	ldr	r1, [r7, #0]
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 fce1 	bl	80057d4 <USBD_CtlError>
      break;
 8004e12:	bf00      	nop
  }

  return ret;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop

08004e20 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e36:	2b40      	cmp	r3, #64	; 0x40
 8004e38:	d005      	beq.n	8004e46 <USBD_StdItfReq+0x26>
 8004e3a:	2b40      	cmp	r3, #64	; 0x40
 8004e3c:	d82f      	bhi.n	8004e9e <USBD_StdItfReq+0x7e>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <USBD_StdItfReq+0x26>
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d12b      	bne.n	8004e9e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d81d      	bhi.n	8004e90 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	889b      	ldrh	r3, [r3, #4]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d813      	bhi.n	8004e86 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	6839      	ldr	r1, [r7, #0]
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	4798      	blx	r3
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	88db      	ldrh	r3, [r3, #6]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d110      	bne.n	8004e9a <USBD_StdItfReq+0x7a>
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10d      	bne.n	8004e9a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fd73 	bl	800596a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004e84:	e009      	b.n	8004e9a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8004e86:	6839      	ldr	r1, [r7, #0]
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fca3 	bl	80057d4 <USBD_CtlError>
          break;
 8004e8e:	e004      	b.n	8004e9a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8004e90:	6839      	ldr	r1, [r7, #0]
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fc9e 	bl	80057d4 <USBD_CtlError>
          break;
 8004e98:	e000      	b.n	8004e9c <USBD_StdItfReq+0x7c>
          break;
 8004e9a:	bf00      	nop
      }
      break;
 8004e9c:	e004      	b.n	8004ea8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8004e9e:	6839      	ldr	r1, [r7, #0]
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fc97 	bl	80057d4 <USBD_CtlError>
      break;
 8004ea6:	bf00      	nop
  }

  return ret;
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	889b      	ldrh	r3, [r3, #4]
 8004ec4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ece:	2b40      	cmp	r3, #64	; 0x40
 8004ed0:	d007      	beq.n	8004ee2 <USBD_StdEPReq+0x30>
 8004ed2:	2b40      	cmp	r3, #64	; 0x40
 8004ed4:	f200 8145 	bhi.w	8005162 <USBD_StdEPReq+0x2b0>
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00c      	beq.n	8004ef6 <USBD_StdEPReq+0x44>
 8004edc:	2b20      	cmp	r3, #32
 8004ede:	f040 8140 	bne.w	8005162 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	6839      	ldr	r1, [r7, #0]
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4798      	blx	r3
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef4:	e13a      	b.n	800516c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	785b      	ldrb	r3, [r3, #1]
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d007      	beq.n	8004f0e <USBD_StdEPReq+0x5c>
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	f300 8129 	bgt.w	8005156 <USBD_StdEPReq+0x2a4>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d07f      	beq.n	8005008 <USBD_StdEPReq+0x156>
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d03c      	beq.n	8004f86 <USBD_StdEPReq+0xd4>
 8004f0c:	e123      	b.n	8005156 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d002      	beq.n	8004f20 <USBD_StdEPReq+0x6e>
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	d016      	beq.n	8004f4c <USBD_StdEPReq+0x9a>
 8004f1e:	e02c      	b.n	8004f7a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f20:	7bbb      	ldrb	r3, [r7, #14]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00d      	beq.n	8004f42 <USBD_StdEPReq+0x90>
 8004f26:	7bbb      	ldrb	r3, [r7, #14]
 8004f28:	2b80      	cmp	r3, #128	; 0x80
 8004f2a:	d00a      	beq.n	8004f42 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f2c:	7bbb      	ldrb	r3, [r7, #14]
 8004f2e:	4619      	mov	r1, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f001 f92f 	bl	8006194 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f36:	2180      	movs	r1, #128	; 0x80
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f001 f92b 	bl	8006194 <USBD_LL_StallEP>
 8004f3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004f40:	e020      	b.n	8004f84 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8004f42:	6839      	ldr	r1, [r7, #0]
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fc45 	bl	80057d4 <USBD_CtlError>
              break;
 8004f4a:	e01b      	b.n	8004f84 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	885b      	ldrh	r3, [r3, #2]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10e      	bne.n	8004f72 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004f54:	7bbb      	ldrb	r3, [r7, #14]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00b      	beq.n	8004f72 <USBD_StdEPReq+0xc0>
 8004f5a:	7bbb      	ldrb	r3, [r7, #14]
 8004f5c:	2b80      	cmp	r3, #128	; 0x80
 8004f5e:	d008      	beq.n	8004f72 <USBD_StdEPReq+0xc0>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	88db      	ldrh	r3, [r3, #6]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d104      	bne.n	8004f72 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f68:	7bbb      	ldrb	r3, [r7, #14]
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f001 f911 	bl	8006194 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fcf9 	bl	800596a <USBD_CtlSendStatus>

              break;
 8004f78:	e004      	b.n	8004f84 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8004f7a:	6839      	ldr	r1, [r7, #0]
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 fc29 	bl	80057d4 <USBD_CtlError>
              break;
 8004f82:	bf00      	nop
          }
          break;
 8004f84:	e0ec      	b.n	8005160 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d002      	beq.n	8004f98 <USBD_StdEPReq+0xe6>
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d016      	beq.n	8004fc4 <USBD_StdEPReq+0x112>
 8004f96:	e030      	b.n	8004ffa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f98:	7bbb      	ldrb	r3, [r7, #14]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00d      	beq.n	8004fba <USBD_StdEPReq+0x108>
 8004f9e:	7bbb      	ldrb	r3, [r7, #14]
 8004fa0:	2b80      	cmp	r3, #128	; 0x80
 8004fa2:	d00a      	beq.n	8004fba <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004fa4:	7bbb      	ldrb	r3, [r7, #14]
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f001 f8f3 	bl	8006194 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004fae:	2180      	movs	r1, #128	; 0x80
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f001 f8ef 	bl	8006194 <USBD_LL_StallEP>
 8004fb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004fb8:	e025      	b.n	8005006 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8004fba:	6839      	ldr	r1, [r7, #0]
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fc09 	bl	80057d4 <USBD_CtlError>
              break;
 8004fc2:	e020      	b.n	8005006 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	885b      	ldrh	r3, [r3, #2]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d11b      	bne.n	8005004 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004fcc:	7bbb      	ldrb	r3, [r7, #14]
 8004fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d004      	beq.n	8004fe0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004fd6:	7bbb      	ldrb	r3, [r7, #14]
 8004fd8:	4619      	mov	r1, r3
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f001 f8f9 	bl	80061d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fcc2 	bl	800596a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	6839      	ldr	r1, [r7, #0]
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	4798      	blx	r3
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8004ff8:	e004      	b.n	8005004 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8004ffa:	6839      	ldr	r1, [r7, #0]
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fbe9 	bl	80057d4 <USBD_CtlError>
              break;
 8005002:	e000      	b.n	8005006 <USBD_StdEPReq+0x154>
              break;
 8005004:	bf00      	nop
          }
          break;
 8005006:	e0ab      	b.n	8005160 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d002      	beq.n	800501a <USBD_StdEPReq+0x168>
 8005014:	2b03      	cmp	r3, #3
 8005016:	d032      	beq.n	800507e <USBD_StdEPReq+0x1cc>
 8005018:	e097      	b.n	800514a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800501a:	7bbb      	ldrb	r3, [r7, #14]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d007      	beq.n	8005030 <USBD_StdEPReq+0x17e>
 8005020:	7bbb      	ldrb	r3, [r7, #14]
 8005022:	2b80      	cmp	r3, #128	; 0x80
 8005024:	d004      	beq.n	8005030 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005026:	6839      	ldr	r1, [r7, #0]
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fbd3 	bl	80057d4 <USBD_CtlError>
                break;
 800502e:	e091      	b.n	8005154 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005030:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005034:	2b00      	cmp	r3, #0
 8005036:	da0b      	bge.n	8005050 <USBD_StdEPReq+0x19e>
 8005038:	7bbb      	ldrb	r3, [r7, #14]
 800503a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	3310      	adds	r3, #16
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	4413      	add	r3, r2
 800504c:	3304      	adds	r3, #4
 800504e:	e00b      	b.n	8005068 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005050:	7bbb      	ldrb	r3, [r7, #14]
 8005052:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	4413      	add	r3, r2
 8005066:	3304      	adds	r3, #4
 8005068:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2202      	movs	r2, #2
 8005074:	4619      	mov	r1, r3
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fc1d 	bl	80058b6 <USBD_CtlSendData>
              break;
 800507c:	e06a      	b.n	8005154 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800507e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005082:	2b00      	cmp	r3, #0
 8005084:	da11      	bge.n	80050aa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005086:	7bbb      	ldrb	r3, [r7, #14]
 8005088:	f003 020f 	and.w	r2, r3, #15
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	440b      	add	r3, r1
 8005098:	3324      	adds	r3, #36	; 0x24
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d117      	bne.n	80050d0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80050a0:	6839      	ldr	r1, [r7, #0]
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fb96 	bl	80057d4 <USBD_CtlError>
                  break;
 80050a8:	e054      	b.n	8005154 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80050aa:	7bbb      	ldrb	r3, [r7, #14]
 80050ac:	f003 020f 	and.w	r2, r3, #15
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	4613      	mov	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	440b      	add	r3, r1
 80050bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d104      	bne.n	80050d0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80050c6:	6839      	ldr	r1, [r7, #0]
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fb83 	bl	80057d4 <USBD_CtlError>
                  break;
 80050ce:	e041      	b.n	8005154 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80050d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	da0b      	bge.n	80050f0 <USBD_StdEPReq+0x23e>
 80050d8:	7bbb      	ldrb	r3, [r7, #14]
 80050da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	3310      	adds	r3, #16
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	4413      	add	r3, r2
 80050ec:	3304      	adds	r3, #4
 80050ee:	e00b      	b.n	8005108 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80050f0:	7bbb      	ldrb	r3, [r7, #14]
 80050f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	4413      	add	r3, r2
 8005106:	3304      	adds	r3, #4
 8005108:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800510a:	7bbb      	ldrb	r3, [r7, #14]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <USBD_StdEPReq+0x264>
 8005110:	7bbb      	ldrb	r3, [r7, #14]
 8005112:	2b80      	cmp	r3, #128	; 0x80
 8005114:	d103      	bne.n	800511e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	e00e      	b.n	800513c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800511e:	7bbb      	ldrb	r3, [r7, #14]
 8005120:	4619      	mov	r1, r3
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f001 f874 	bl	8006210 <USBD_LL_IsStallEP>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2201      	movs	r2, #1
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	e002      	b.n	800513c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2202      	movs	r2, #2
 8005140:	4619      	mov	r1, r3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fbb7 	bl	80058b6 <USBD_CtlSendData>
              break;
 8005148:	e004      	b.n	8005154 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800514a:	6839      	ldr	r1, [r7, #0]
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fb41 	bl	80057d4 <USBD_CtlError>
              break;
 8005152:	bf00      	nop
          }
          break;
 8005154:	e004      	b.n	8005160 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005156:	6839      	ldr	r1, [r7, #0]
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fb3b 	bl	80057d4 <USBD_CtlError>
          break;
 800515e:	bf00      	nop
      }
      break;
 8005160:	e004      	b.n	800516c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005162:	6839      	ldr	r1, [r7, #0]
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fb35 	bl	80057d4 <USBD_CtlError>
      break;
 800516a:	bf00      	nop
  }

  return ret;
 800516c:	7bfb      	ldrb	r3, [r7, #15]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
	...

08005178 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005186:	2300      	movs	r3, #0
 8005188:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	885b      	ldrh	r3, [r3, #2]
 8005192:	0a1b      	lsrs	r3, r3, #8
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	2b06      	cmp	r3, #6
 800519a:	f200 8128 	bhi.w	80053ee <USBD_GetDescriptor+0x276>
 800519e:	a201      	add	r2, pc, #4	; (adr r2, 80051a4 <USBD_GetDescriptor+0x2c>)
 80051a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a4:	080051c1 	.word	0x080051c1
 80051a8:	080051d9 	.word	0x080051d9
 80051ac:	08005219 	.word	0x08005219
 80051b0:	080053ef 	.word	0x080053ef
 80051b4:	080053ef 	.word	0x080053ef
 80051b8:	0800538f 	.word	0x0800538f
 80051bc:	080053bb 	.word	0x080053bb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	7c12      	ldrb	r2, [r2, #16]
 80051cc:	f107 0108 	add.w	r1, r7, #8
 80051d0:	4610      	mov	r0, r2
 80051d2:	4798      	blx	r3
 80051d4:	60f8      	str	r0, [r7, #12]
      break;
 80051d6:	e112      	b.n	80053fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	7c1b      	ldrb	r3, [r3, #16]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10d      	bne.n	80051fc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e8:	f107 0208 	add.w	r2, r7, #8
 80051ec:	4610      	mov	r0, r2
 80051ee:	4798      	blx	r3
 80051f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3301      	adds	r3, #1
 80051f6:	2202      	movs	r2, #2
 80051f8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80051fa:	e100      	b.n	80053fe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	f107 0208 	add.w	r2, r7, #8
 8005208:	4610      	mov	r0, r2
 800520a:	4798      	blx	r3
 800520c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3301      	adds	r3, #1
 8005212:	2202      	movs	r2, #2
 8005214:	701a      	strb	r2, [r3, #0]
      break;
 8005216:	e0f2      	b.n	80053fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	885b      	ldrh	r3, [r3, #2]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b05      	cmp	r3, #5
 8005220:	f200 80ac 	bhi.w	800537c <USBD_GetDescriptor+0x204>
 8005224:	a201      	add	r2, pc, #4	; (adr r2, 800522c <USBD_GetDescriptor+0xb4>)
 8005226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522a:	bf00      	nop
 800522c:	08005245 	.word	0x08005245
 8005230:	08005279 	.word	0x08005279
 8005234:	080052ad 	.word	0x080052ad
 8005238:	080052e1 	.word	0x080052e1
 800523c:	08005315 	.word	0x08005315
 8005240:	08005349 	.word	0x08005349
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00b      	beq.n	8005268 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	7c12      	ldrb	r2, [r2, #16]
 800525c:	f107 0108 	add.w	r1, r7, #8
 8005260:	4610      	mov	r0, r2
 8005262:	4798      	blx	r3
 8005264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005266:	e091      	b.n	800538c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005268:	6839      	ldr	r1, [r7, #0]
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fab2 	bl	80057d4 <USBD_CtlError>
            err++;
 8005270:	7afb      	ldrb	r3, [r7, #11]
 8005272:	3301      	adds	r3, #1
 8005274:	72fb      	strb	r3, [r7, #11]
          break;
 8005276:	e089      	b.n	800538c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00b      	beq.n	800529c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	7c12      	ldrb	r2, [r2, #16]
 8005290:	f107 0108 	add.w	r1, r7, #8
 8005294:	4610      	mov	r0, r2
 8005296:	4798      	blx	r3
 8005298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800529a:	e077      	b.n	800538c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800529c:	6839      	ldr	r1, [r7, #0]
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fa98 	bl	80057d4 <USBD_CtlError>
            err++;
 80052a4:	7afb      	ldrb	r3, [r7, #11]
 80052a6:	3301      	adds	r3, #1
 80052a8:	72fb      	strb	r3, [r7, #11]
          break;
 80052aa:	e06f      	b.n	800538c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00b      	beq.n	80052d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	7c12      	ldrb	r2, [r2, #16]
 80052c4:	f107 0108 	add.w	r1, r7, #8
 80052c8:	4610      	mov	r0, r2
 80052ca:	4798      	blx	r3
 80052cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80052ce:	e05d      	b.n	800538c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fa7e 	bl	80057d4 <USBD_CtlError>
            err++;
 80052d8:	7afb      	ldrb	r3, [r7, #11]
 80052da:	3301      	adds	r3, #1
 80052dc:	72fb      	strb	r3, [r7, #11]
          break;
 80052de:	e055      	b.n	800538c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00b      	beq.n	8005304 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	7c12      	ldrb	r2, [r2, #16]
 80052f8:	f107 0108 	add.w	r1, r7, #8
 80052fc:	4610      	mov	r0, r2
 80052fe:	4798      	blx	r3
 8005300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005302:	e043      	b.n	800538c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005304:	6839      	ldr	r1, [r7, #0]
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fa64 	bl	80057d4 <USBD_CtlError>
            err++;
 800530c:	7afb      	ldrb	r3, [r7, #11]
 800530e:	3301      	adds	r3, #1
 8005310:	72fb      	strb	r3, [r7, #11]
          break;
 8005312:	e03b      	b.n	800538c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00b      	beq.n	8005338 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	7c12      	ldrb	r2, [r2, #16]
 800532c:	f107 0108 	add.w	r1, r7, #8
 8005330:	4610      	mov	r0, r2
 8005332:	4798      	blx	r3
 8005334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005336:	e029      	b.n	800538c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005338:	6839      	ldr	r1, [r7, #0]
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fa4a 	bl	80057d4 <USBD_CtlError>
            err++;
 8005340:	7afb      	ldrb	r3, [r7, #11]
 8005342:	3301      	adds	r3, #1
 8005344:	72fb      	strb	r3, [r7, #11]
          break;
 8005346:	e021      	b.n	800538c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00b      	beq.n	800536c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	7c12      	ldrb	r2, [r2, #16]
 8005360:	f107 0108 	add.w	r1, r7, #8
 8005364:	4610      	mov	r0, r2
 8005366:	4798      	blx	r3
 8005368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800536a:	e00f      	b.n	800538c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800536c:	6839      	ldr	r1, [r7, #0]
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fa30 	bl	80057d4 <USBD_CtlError>
            err++;
 8005374:	7afb      	ldrb	r3, [r7, #11]
 8005376:	3301      	adds	r3, #1
 8005378:	72fb      	strb	r3, [r7, #11]
          break;
 800537a:	e007      	b.n	800538c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800537c:	6839      	ldr	r1, [r7, #0]
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fa28 	bl	80057d4 <USBD_CtlError>
          err++;
 8005384:	7afb      	ldrb	r3, [r7, #11]
 8005386:	3301      	adds	r3, #1
 8005388:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800538a:	bf00      	nop
      }
      break;
 800538c:	e037      	b.n	80053fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	7c1b      	ldrb	r3, [r3, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800539c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539e:	f107 0208 	add.w	r2, r7, #8
 80053a2:	4610      	mov	r0, r2
 80053a4:	4798      	blx	r3
 80053a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80053a8:	e029      	b.n	80053fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80053aa:	6839      	ldr	r1, [r7, #0]
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fa11 	bl	80057d4 <USBD_CtlError>
        err++;
 80053b2:	7afb      	ldrb	r3, [r7, #11]
 80053b4:	3301      	adds	r3, #1
 80053b6:	72fb      	strb	r3, [r7, #11]
      break;
 80053b8:	e021      	b.n	80053fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	7c1b      	ldrb	r3, [r3, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10d      	bne.n	80053de <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ca:	f107 0208 	add.w	r2, r7, #8
 80053ce:	4610      	mov	r0, r2
 80053d0:	4798      	blx	r3
 80053d2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3301      	adds	r3, #1
 80053d8:	2207      	movs	r2, #7
 80053da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80053dc:	e00f      	b.n	80053fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80053de:	6839      	ldr	r1, [r7, #0]
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f9f7 	bl	80057d4 <USBD_CtlError>
        err++;
 80053e6:	7afb      	ldrb	r3, [r7, #11]
 80053e8:	3301      	adds	r3, #1
 80053ea:	72fb      	strb	r3, [r7, #11]
      break;
 80053ec:	e007      	b.n	80053fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80053ee:	6839      	ldr	r1, [r7, #0]
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f9ef 	bl	80057d4 <USBD_CtlError>
      err++;
 80053f6:	7afb      	ldrb	r3, [r7, #11]
 80053f8:	3301      	adds	r3, #1
 80053fa:	72fb      	strb	r3, [r7, #11]
      break;
 80053fc:	bf00      	nop
  }

  if (err != 0U)
 80053fe:	7afb      	ldrb	r3, [r7, #11]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d11e      	bne.n	8005442 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	88db      	ldrh	r3, [r3, #6]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d016      	beq.n	800543a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800540c:	893b      	ldrh	r3, [r7, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00e      	beq.n	8005430 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	88da      	ldrh	r2, [r3, #6]
 8005416:	893b      	ldrh	r3, [r7, #8]
 8005418:	4293      	cmp	r3, r2
 800541a:	bf28      	it	cs
 800541c:	4613      	movcs	r3, r2
 800541e:	b29b      	uxth	r3, r3
 8005420:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005422:	893b      	ldrh	r3, [r7, #8]
 8005424:	461a      	mov	r2, r3
 8005426:	68f9      	ldr	r1, [r7, #12]
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 fa44 	bl	80058b6 <USBD_CtlSendData>
 800542e:	e009      	b.n	8005444 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005430:	6839      	ldr	r1, [r7, #0]
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f9ce 	bl	80057d4 <USBD_CtlError>
 8005438:	e004      	b.n	8005444 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fa95 	bl	800596a <USBD_CtlSendStatus>
 8005440:	e000      	b.n	8005444 <USBD_GetDescriptor+0x2cc>
    return;
 8005442:	bf00      	nop
  }
}
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop

0800544c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	889b      	ldrh	r3, [r3, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d131      	bne.n	80054c2 <USBD_SetAddress+0x76>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	88db      	ldrh	r3, [r3, #6]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d12d      	bne.n	80054c2 <USBD_SetAddress+0x76>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	885b      	ldrh	r3, [r3, #2]
 800546a:	2b7f      	cmp	r3, #127	; 0x7f
 800546c:	d829      	bhi.n	80054c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	885b      	ldrh	r3, [r3, #2]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005478:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b03      	cmp	r3, #3
 8005484:	d104      	bne.n	8005490 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f9a3 	bl	80057d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800548e:	e01d      	b.n	80054cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	7bfa      	ldrb	r2, [r7, #15]
 8005494:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005498:	7bfb      	ldrb	r3, [r7, #15]
 800549a:	4619      	mov	r1, r3
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fee3 	bl	8006268 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fa61 	bl	800596a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d004      	beq.n	80054b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054b6:	e009      	b.n	80054cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054c0:	e004      	b.n	80054cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80054c2:	6839      	ldr	r1, [r7, #0]
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f985 	bl	80057d4 <USBD_CtlError>
  }
}
 80054ca:	bf00      	nop
 80054cc:	bf00      	nop
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	885b      	ldrh	r3, [r3, #2]
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	4b4c      	ldr	r3, [pc, #304]	; (800561c <USBD_SetConfig+0x148>)
 80054ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80054ec:	4b4b      	ldr	r3, [pc, #300]	; (800561c <USBD_SetConfig+0x148>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d905      	bls.n	8005500 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80054f4:	6839      	ldr	r1, [r7, #0]
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f96c 	bl	80057d4 <USBD_CtlError>
    return USBD_FAIL;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e088      	b.n	8005612 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d002      	beq.n	8005512 <USBD_SetConfig+0x3e>
 800550c:	2b03      	cmp	r3, #3
 800550e:	d025      	beq.n	800555c <USBD_SetConfig+0x88>
 8005510:	e071      	b.n	80055f6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005512:	4b42      	ldr	r3, [pc, #264]	; (800561c <USBD_SetConfig+0x148>)
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d01c      	beq.n	8005554 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800551a:	4b40      	ldr	r3, [pc, #256]	; (800561c <USBD_SetConfig+0x148>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005524:	4b3d      	ldr	r3, [pc, #244]	; (800561c <USBD_SetConfig+0x148>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	4619      	mov	r1, r3
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7ff f948 	bl	80047c0 <USBD_SetClassConfig>
 8005530:	4603      	mov	r3, r0
 8005532:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d004      	beq.n	8005544 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f949 	bl	80057d4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005542:	e065      	b.n	8005610 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fa10 	bl	800596a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2203      	movs	r2, #3
 800554e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005552:	e05d      	b.n	8005610 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fa08 	bl	800596a <USBD_CtlSendStatus>
      break;
 800555a:	e059      	b.n	8005610 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800555c:	4b2f      	ldr	r3, [pc, #188]	; (800561c <USBD_SetConfig+0x148>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d112      	bne.n	800558a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2202      	movs	r2, #2
 8005568:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800556c:	4b2b      	ldr	r3, [pc, #172]	; (800561c <USBD_SetConfig+0x148>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	461a      	mov	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005576:	4b29      	ldr	r3, [pc, #164]	; (800561c <USBD_SetConfig+0x148>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	4619      	mov	r1, r3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff f93b 	bl	80047f8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f9f1 	bl	800596a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005588:	e042      	b.n	8005610 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800558a:	4b24      	ldr	r3, [pc, #144]	; (800561c <USBD_SetConfig+0x148>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	429a      	cmp	r2, r3
 8005596:	d02a      	beq.n	80055ee <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	b2db      	uxtb	r3, r3
 800559e:	4619      	mov	r1, r3
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff f929 	bl	80047f8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80055a6:	4b1d      	ldr	r3, [pc, #116]	; (800561c <USBD_SetConfig+0x148>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80055b0:	4b1a      	ldr	r3, [pc, #104]	; (800561c <USBD_SetConfig+0x148>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	4619      	mov	r1, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7ff f902 	bl	80047c0 <USBD_SetClassConfig>
 80055bc:	4603      	mov	r3, r0
 80055be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00f      	beq.n	80055e6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80055c6:	6839      	ldr	r1, [r7, #0]
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f903 	bl	80057d4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	4619      	mov	r1, r3
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7ff f90e 	bl	80047f8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80055e4:	e014      	b.n	8005610 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f9bf 	bl	800596a <USBD_CtlSendStatus>
      break;
 80055ec:	e010      	b.n	8005610 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f9bb 	bl	800596a <USBD_CtlSendStatus>
      break;
 80055f4:	e00c      	b.n	8005610 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80055f6:	6839      	ldr	r1, [r7, #0]
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f8eb 	bl	80057d4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80055fe:	4b07      	ldr	r3, [pc, #28]	; (800561c <USBD_SetConfig+0x148>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	4619      	mov	r1, r3
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff f8f7 	bl	80047f8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800560a:	2303      	movs	r3, #3
 800560c:	73fb      	strb	r3, [r7, #15]
      break;
 800560e:	bf00      	nop
  }

  return ret;
 8005610:	7bfb      	ldrb	r3, [r7, #15]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	2000019c 	.word	0x2000019c

08005620 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	88db      	ldrh	r3, [r3, #6]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d004      	beq.n	800563c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005632:	6839      	ldr	r1, [r7, #0]
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f8cd 	bl	80057d4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800563a:	e023      	b.n	8005684 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	dc02      	bgt.n	800564e <USBD_GetConfig+0x2e>
 8005648:	2b00      	cmp	r3, #0
 800564a:	dc03      	bgt.n	8005654 <USBD_GetConfig+0x34>
 800564c:	e015      	b.n	800567a <USBD_GetConfig+0x5a>
 800564e:	2b03      	cmp	r3, #3
 8005650:	d00b      	beq.n	800566a <USBD_GetConfig+0x4a>
 8005652:	e012      	b.n	800567a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3308      	adds	r3, #8
 800565e:	2201      	movs	r2, #1
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f927 	bl	80058b6 <USBD_CtlSendData>
        break;
 8005668:	e00c      	b.n	8005684 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	3304      	adds	r3, #4
 800566e:	2201      	movs	r2, #1
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f91f 	bl	80058b6 <USBD_CtlSendData>
        break;
 8005678:	e004      	b.n	8005684 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800567a:	6839      	ldr	r1, [r7, #0]
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f8a9 	bl	80057d4 <USBD_CtlError>
        break;
 8005682:	bf00      	nop
}
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800569c:	b2db      	uxtb	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d81e      	bhi.n	80056e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	88db      	ldrh	r3, [r3, #6]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d004      	beq.n	80056b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80056ac:	6839      	ldr	r1, [r7, #0]
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f890 	bl	80057d4 <USBD_CtlError>
        break;
 80056b4:	e01a      	b.n	80056ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d005      	beq.n	80056d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f043 0202 	orr.w	r2, r3, #2
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	330c      	adds	r3, #12
 80056d6:	2202      	movs	r2, #2
 80056d8:	4619      	mov	r1, r3
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f8eb 	bl	80058b6 <USBD_CtlSendData>
      break;
 80056e0:	e004      	b.n	80056ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80056e2:	6839      	ldr	r1, [r7, #0]
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f875 	bl	80057d4 <USBD_CtlError>
      break;
 80056ea:	bf00      	nop
  }
}
 80056ec:	bf00      	nop
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	885b      	ldrh	r3, [r3, #2]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d106      	bne.n	8005714 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f92b 	bl	800596a <USBD_CtlSendStatus>
  }
}
 8005714:	bf00      	nop
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800572c:	b2db      	uxtb	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	2b02      	cmp	r3, #2
 8005732:	d80b      	bhi.n	800574c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	885b      	ldrh	r3, [r3, #2]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d10c      	bne.n	8005756 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f910 	bl	800596a <USBD_CtlSendStatus>
      }
      break;
 800574a:	e004      	b.n	8005756 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f840 	bl	80057d4 <USBD_CtlError>
      break;
 8005754:	e000      	b.n	8005758 <USBD_ClrFeature+0x3c>
      break;
 8005756:	bf00      	nop
  }
}
 8005758:	bf00      	nop
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	781a      	ldrb	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3301      	adds	r3, #1
 800577a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	781a      	ldrb	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3301      	adds	r3, #1
 8005788:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f7ff fabb 	bl	8004d06 <SWAPBYTE>
 8005790:	4603      	mov	r3, r0
 8005792:	461a      	mov	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	3301      	adds	r3, #1
 800579c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3301      	adds	r3, #1
 80057a2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f7ff faae 	bl	8004d06 <SWAPBYTE>
 80057aa:	4603      	mov	r3, r0
 80057ac:	461a      	mov	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3301      	adds	r3, #1
 80057b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3301      	adds	r3, #1
 80057bc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f7ff faa1 	bl	8004d06 <SWAPBYTE>
 80057c4:	4603      	mov	r3, r0
 80057c6:	461a      	mov	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	80da      	strh	r2, [r3, #6]
}
 80057cc:	bf00      	nop
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80057de:	2180      	movs	r1, #128	; 0x80
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fcd7 	bl	8006194 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80057e6:	2100      	movs	r1, #0
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fcd3 	bl	8006194 <USBD_LL_StallEP>
}
 80057ee:	bf00      	nop
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b086      	sub	sp, #24
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d036      	beq.n	800587a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005810:	6938      	ldr	r0, [r7, #16]
 8005812:	f000 f836 	bl	8005882 <USBD_GetLen>
 8005816:	4603      	mov	r3, r0
 8005818:	3301      	adds	r3, #1
 800581a:	b29b      	uxth	r3, r3
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005824:	7dfb      	ldrb	r3, [r7, #23]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	4413      	add	r3, r2
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	7812      	ldrb	r2, [r2, #0]
 800582e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005830:	7dfb      	ldrb	r3, [r7, #23]
 8005832:	3301      	adds	r3, #1
 8005834:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005836:	7dfb      	ldrb	r3, [r7, #23]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	4413      	add	r3, r2
 800583c:	2203      	movs	r2, #3
 800583e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005840:	7dfb      	ldrb	r3, [r7, #23]
 8005842:	3301      	adds	r3, #1
 8005844:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005846:	e013      	b.n	8005870 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005848:	7dfb      	ldrb	r3, [r7, #23]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	4413      	add	r3, r2
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	7812      	ldrb	r2, [r2, #0]
 8005852:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	3301      	adds	r3, #1
 8005858:	613b      	str	r3, [r7, #16]
    idx++;
 800585a:	7dfb      	ldrb	r3, [r7, #23]
 800585c:	3301      	adds	r3, #1
 800585e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005860:	7dfb      	ldrb	r3, [r7, #23]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	4413      	add	r3, r2
 8005866:	2200      	movs	r2, #0
 8005868:	701a      	strb	r2, [r3, #0]
    idx++;
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	3301      	adds	r3, #1
 800586e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1e7      	bne.n	8005848 <USBD_GetString+0x52>
 8005878:	e000      	b.n	800587c <USBD_GetString+0x86>
    return;
 800587a:	bf00      	nop
  }
}
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005882:	b480      	push	{r7}
 8005884:	b085      	sub	sp, #20
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005892:	e005      	b.n	80058a0 <USBD_GetLen+0x1e>
  {
    len++;
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	3301      	adds	r3, #1
 8005898:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	3301      	adds	r3, #1
 800589e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1f5      	bne.n	8005894 <USBD_GetLen+0x12>
  }

  return len;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	60f8      	str	r0, [r7, #12]
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2202      	movs	r2, #2
 80058c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	2100      	movs	r1, #0
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 fce2 	bl	80062a6 <USBD_LL_Transmit>

  return USBD_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	2100      	movs	r1, #0
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 fcd1 	bl	80062a6 <USBD_LL_Transmit>

  return USBD_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2203      	movs	r2, #3
 800591e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	2100      	movs	r1, #0
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fcd5 	bl	80062e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	2100      	movs	r1, #0
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 fcc4 	bl	80062e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b082      	sub	sp, #8
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2204      	movs	r2, #4
 8005976:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800597a:	2300      	movs	r3, #0
 800597c:	2200      	movs	r2, #0
 800597e:	2100      	movs	r1, #0
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fc90 	bl	80062a6 <USBD_LL_Transmit>

  return USBD_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2205      	movs	r2, #5
 800599c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059a0:	2300      	movs	r3, #0
 80059a2:	2200      	movs	r2, #0
 80059a4:	2100      	movs	r1, #0
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fc9e 	bl	80062e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
	...

080059b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80059bc:	2200      	movs	r2, #0
 80059be:	4912      	ldr	r1, [pc, #72]	; (8005a08 <MX_USB_DEVICE_Init+0x50>)
 80059c0:	4812      	ldr	r0, [pc, #72]	; (8005a0c <MX_USB_DEVICE_Init+0x54>)
 80059c2:	f7fe fe8f 	bl	80046e4 <USBD_Init>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80059cc:	f7fa fe64 	bl	8000698 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80059d0:	490f      	ldr	r1, [pc, #60]	; (8005a10 <MX_USB_DEVICE_Init+0x58>)
 80059d2:	480e      	ldr	r0, [pc, #56]	; (8005a0c <MX_USB_DEVICE_Init+0x54>)
 80059d4:	f7fe feb6 	bl	8004744 <USBD_RegisterClass>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80059de:	f7fa fe5b 	bl	8000698 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80059e2:	490c      	ldr	r1, [pc, #48]	; (8005a14 <MX_USB_DEVICE_Init+0x5c>)
 80059e4:	4809      	ldr	r0, [pc, #36]	; (8005a0c <MX_USB_DEVICE_Init+0x54>)
 80059e6:	f7fe fdd7 	bl	8004598 <USBD_CDC_RegisterInterface>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80059f0:	f7fa fe52 	bl	8000698 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80059f4:	4805      	ldr	r0, [pc, #20]	; (8005a0c <MX_USB_DEVICE_Init+0x54>)
 80059f6:	f7fe fecc 	bl	8004792 <USBD_Start>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005a00:	f7fa fe4a 	bl	8000698 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005a04:	bf00      	nop
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	20000130 	.word	0x20000130
 8005a0c:	200003c4 	.word	0x200003c4
 8005a10:	20000018 	.word	0x20000018
 8005a14:	2000011c 	.word	0x2000011c

08005a18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	4905      	ldr	r1, [pc, #20]	; (8005a34 <CDC_Init_FS+0x1c>)
 8005a20:	4805      	ldr	r0, [pc, #20]	; (8005a38 <CDC_Init_FS+0x20>)
 8005a22:	f7fe fdce 	bl	80045c2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005a26:	4905      	ldr	r1, [pc, #20]	; (8005a3c <CDC_Init_FS+0x24>)
 8005a28:	4803      	ldr	r0, [pc, #12]	; (8005a38 <CDC_Init_FS+0x20>)
 8005a2a:	f7fe fde8 	bl	80045fe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005a2e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20000e94 	.word	0x20000e94
 8005a38:	200003c4 	.word	0x200003c4
 8005a3c:	20000694 	.word	0x20000694

08005a40 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005a40:	b480      	push	{r7}
 8005a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005a44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	4603      	mov	r3, r0
 8005a58:	6039      	str	r1, [r7, #0]
 8005a5a:	71fb      	strb	r3, [r7, #7]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005a60:	79fb      	ldrb	r3, [r7, #7]
 8005a62:	2b23      	cmp	r3, #35	; 0x23
 8005a64:	d84a      	bhi.n	8005afc <CDC_Control_FS+0xac>
 8005a66:	a201      	add	r2, pc, #4	; (adr r2, 8005a6c <CDC_Control_FS+0x1c>)
 8005a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6c:	08005afd 	.word	0x08005afd
 8005a70:	08005afd 	.word	0x08005afd
 8005a74:	08005afd 	.word	0x08005afd
 8005a78:	08005afd 	.word	0x08005afd
 8005a7c:	08005afd 	.word	0x08005afd
 8005a80:	08005afd 	.word	0x08005afd
 8005a84:	08005afd 	.word	0x08005afd
 8005a88:	08005afd 	.word	0x08005afd
 8005a8c:	08005afd 	.word	0x08005afd
 8005a90:	08005afd 	.word	0x08005afd
 8005a94:	08005afd 	.word	0x08005afd
 8005a98:	08005afd 	.word	0x08005afd
 8005a9c:	08005afd 	.word	0x08005afd
 8005aa0:	08005afd 	.word	0x08005afd
 8005aa4:	08005afd 	.word	0x08005afd
 8005aa8:	08005afd 	.word	0x08005afd
 8005aac:	08005afd 	.word	0x08005afd
 8005ab0:	08005afd 	.word	0x08005afd
 8005ab4:	08005afd 	.word	0x08005afd
 8005ab8:	08005afd 	.word	0x08005afd
 8005abc:	08005afd 	.word	0x08005afd
 8005ac0:	08005afd 	.word	0x08005afd
 8005ac4:	08005afd 	.word	0x08005afd
 8005ac8:	08005afd 	.word	0x08005afd
 8005acc:	08005afd 	.word	0x08005afd
 8005ad0:	08005afd 	.word	0x08005afd
 8005ad4:	08005afd 	.word	0x08005afd
 8005ad8:	08005afd 	.word	0x08005afd
 8005adc:	08005afd 	.word	0x08005afd
 8005ae0:	08005afd 	.word	0x08005afd
 8005ae4:	08005afd 	.word	0x08005afd
 8005ae8:	08005afd 	.word	0x08005afd
 8005aec:	08005afd 	.word	0x08005afd
 8005af0:	08005afd 	.word	0x08005afd
 8005af4:	08005afd 	.word	0x08005afd
 8005af8:	08005afd 	.word	0x08005afd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005afc:	bf00      	nop
  }

  return (USBD_OK);
 8005afe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	4805      	ldr	r0, [pc, #20]	; (8005b30 <CDC_Receive_FS+0x24>)
 8005b1a:	f7fe fd70 	bl	80045fe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005b1e:	4804      	ldr	r0, [pc, #16]	; (8005b30 <CDC_Receive_FS+0x24>)
 8005b20:	f7fe fdb6 	bl	8004690 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005b24:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	200003c4 	.word	0x200003c4

08005b34 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005b44:	4b0d      	ldr	r3, [pc, #52]	; (8005b7c <CDC_Transmit_FS+0x48>)
 8005b46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b4a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e00b      	b.n	8005b72 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005b5a:	887b      	ldrh	r3, [r7, #2]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	4806      	ldr	r0, [pc, #24]	; (8005b7c <CDC_Transmit_FS+0x48>)
 8005b62:	f7fe fd2e 	bl	80045c2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005b66:	4805      	ldr	r0, [pc, #20]	; (8005b7c <CDC_Transmit_FS+0x48>)
 8005b68:	f7fe fd62 	bl	8004630 <USBD_CDC_TransmitPacket>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	200003c4 	.word	0x200003c4

08005b80 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005b92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
	...

08005ba4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	4603      	mov	r3, r0
 8005bac:	6039      	str	r1, [r7, #0]
 8005bae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2212      	movs	r2, #18
 8005bb4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005bb6:	4b03      	ldr	r3, [pc, #12]	; (8005bc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	2000014c 	.word	0x2000014c

08005bc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	4603      	mov	r3, r0
 8005bd0:	6039      	str	r1, [r7, #0]
 8005bd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2204      	movs	r2, #4
 8005bd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005bda:	4b03      	ldr	r3, [pc, #12]	; (8005be8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	20000160 	.word	0x20000160

08005bec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	6039      	str	r1, [r7, #0]
 8005bf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005bf8:	79fb      	ldrb	r3, [r7, #7]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d105      	bne.n	8005c0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	4907      	ldr	r1, [pc, #28]	; (8005c20 <USBD_FS_ProductStrDescriptor+0x34>)
 8005c02:	4808      	ldr	r0, [pc, #32]	; (8005c24 <USBD_FS_ProductStrDescriptor+0x38>)
 8005c04:	f7ff fdf7 	bl	80057f6 <USBD_GetString>
 8005c08:	e004      	b.n	8005c14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	4904      	ldr	r1, [pc, #16]	; (8005c20 <USBD_FS_ProductStrDescriptor+0x34>)
 8005c0e:	4805      	ldr	r0, [pc, #20]	; (8005c24 <USBD_FS_ProductStrDescriptor+0x38>)
 8005c10:	f7ff fdf1 	bl	80057f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005c14:	4b02      	ldr	r3, [pc, #8]	; (8005c20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20001694 	.word	0x20001694
 8005c24:	08006454 	.word	0x08006454

08005c28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	6039      	str	r1, [r7, #0]
 8005c32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	4904      	ldr	r1, [pc, #16]	; (8005c48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005c38:	4804      	ldr	r0, [pc, #16]	; (8005c4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005c3a:	f7ff fddc 	bl	80057f6 <USBD_GetString>
  return USBD_StrDesc;
 8005c3e:	4b02      	ldr	r3, [pc, #8]	; (8005c48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	20001694 	.word	0x20001694
 8005c4c:	0800646c 	.word	0x0800646c

08005c50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	4603      	mov	r3, r0
 8005c58:	6039      	str	r1, [r7, #0]
 8005c5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	221a      	movs	r2, #26
 8005c60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005c62:	f000 f843 	bl	8005cec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005c66:	4b02      	ldr	r3, [pc, #8]	; (8005c70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	20000164 	.word	0x20000164

08005c74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	6039      	str	r1, [r7, #0]
 8005c7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005c80:	79fb      	ldrb	r3, [r7, #7]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d105      	bne.n	8005c92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	4907      	ldr	r1, [pc, #28]	; (8005ca8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005c8a:	4808      	ldr	r0, [pc, #32]	; (8005cac <USBD_FS_ConfigStrDescriptor+0x38>)
 8005c8c:	f7ff fdb3 	bl	80057f6 <USBD_GetString>
 8005c90:	e004      	b.n	8005c9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	4904      	ldr	r1, [pc, #16]	; (8005ca8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005c96:	4805      	ldr	r0, [pc, #20]	; (8005cac <USBD_FS_ConfigStrDescriptor+0x38>)
 8005c98:	f7ff fdad 	bl	80057f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005c9c:	4b02      	ldr	r3, [pc, #8]	; (8005ca8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20001694 	.word	0x20001694
 8005cac:	08006480 	.word	0x08006480

08005cb0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	6039      	str	r1, [r7, #0]
 8005cba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005cbc:	79fb      	ldrb	r3, [r7, #7]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d105      	bne.n	8005cce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	4907      	ldr	r1, [pc, #28]	; (8005ce4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005cc6:	4808      	ldr	r0, [pc, #32]	; (8005ce8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005cc8:	f7ff fd95 	bl	80057f6 <USBD_GetString>
 8005ccc:	e004      	b.n	8005cd8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	4904      	ldr	r1, [pc, #16]	; (8005ce4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005cd2:	4805      	ldr	r0, [pc, #20]	; (8005ce8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005cd4:	f7ff fd8f 	bl	80057f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005cd8:	4b02      	ldr	r3, [pc, #8]	; (8005ce4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20001694 	.word	0x20001694
 8005ce8:	0800648c 	.word	0x0800648c

08005cec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005cf2:	4b0f      	ldr	r3, [pc, #60]	; (8005d30 <Get_SerialNum+0x44>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005cf8:	4b0e      	ldr	r3, [pc, #56]	; (8005d34 <Get_SerialNum+0x48>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005cfe:	4b0e      	ldr	r3, [pc, #56]	; (8005d38 <Get_SerialNum+0x4c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4413      	add	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d009      	beq.n	8005d26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005d12:	2208      	movs	r2, #8
 8005d14:	4909      	ldr	r1, [pc, #36]	; (8005d3c <Get_SerialNum+0x50>)
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 f814 	bl	8005d44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005d1c:	2204      	movs	r2, #4
 8005d1e:	4908      	ldr	r1, [pc, #32]	; (8005d40 <Get_SerialNum+0x54>)
 8005d20:	68b8      	ldr	r0, [r7, #8]
 8005d22:	f000 f80f 	bl	8005d44 <IntToUnicode>
  }
}
 8005d26:	bf00      	nop
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	1fff7a10 	.word	0x1fff7a10
 8005d34:	1fff7a14 	.word	0x1fff7a14
 8005d38:	1fff7a18 	.word	0x1fff7a18
 8005d3c:	20000166 	.word	0x20000166
 8005d40:	20000176 	.word	0x20000176

08005d44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005d56:	2300      	movs	r3, #0
 8005d58:	75fb      	strb	r3, [r7, #23]
 8005d5a:	e027      	b.n	8005dac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	0f1b      	lsrs	r3, r3, #28
 8005d60:	2b09      	cmp	r3, #9
 8005d62:	d80b      	bhi.n	8005d7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	0f1b      	lsrs	r3, r3, #28
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	7dfb      	ldrb	r3, [r7, #23]
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	4619      	mov	r1, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	440b      	add	r3, r1
 8005d74:	3230      	adds	r2, #48	; 0x30
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	e00a      	b.n	8005d92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	0f1b      	lsrs	r3, r3, #28
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	7dfb      	ldrb	r3, [r7, #23]
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	4619      	mov	r1, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	440b      	add	r3, r1
 8005d8c:	3237      	adds	r2, #55	; 0x37
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	4413      	add	r3, r2
 8005da2:	2200      	movs	r2, #0
 8005da4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
 8005da8:	3301      	adds	r3, #1
 8005daa:	75fb      	strb	r3, [r7, #23]
 8005dac:	7dfa      	ldrb	r2, [r7, #23]
 8005dae:	79fb      	ldrb	r3, [r7, #7]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d3d3      	bcc.n	8005d5c <IntToUnicode+0x18>
  }
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	; 0x28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dcc:	f107 0314 	add.w	r3, r7, #20
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	605a      	str	r2, [r3, #4]
 8005dd6:	609a      	str	r2, [r3, #8]
 8005dd8:	60da      	str	r2, [r3, #12]
 8005dda:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005de4:	d13a      	bne.n	8005e5c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005de6:	2300      	movs	r3, #0
 8005de8:	613b      	str	r3, [r7, #16]
 8005dea:	4b1e      	ldr	r3, [pc, #120]	; (8005e64 <HAL_PCD_MspInit+0xa0>)
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dee:	4a1d      	ldr	r2, [pc, #116]	; (8005e64 <HAL_PCD_MspInit+0xa0>)
 8005df0:	f043 0301 	orr.w	r3, r3, #1
 8005df4:	6313      	str	r3, [r2, #48]	; 0x30
 8005df6:	4b1b      	ldr	r3, [pc, #108]	; (8005e64 <HAL_PCD_MspInit+0xa0>)
 8005df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	613b      	str	r3, [r7, #16]
 8005e00:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005e02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e08:	2302      	movs	r3, #2
 8005e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e10:	2303      	movs	r3, #3
 8005e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005e14:	230a      	movs	r3, #10
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e18:	f107 0314 	add.w	r3, r7, #20
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4812      	ldr	r0, [pc, #72]	; (8005e68 <HAL_PCD_MspInit+0xa4>)
 8005e20:	f7fa fe80 	bl	8000b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005e24:	4b0f      	ldr	r3, [pc, #60]	; (8005e64 <HAL_PCD_MspInit+0xa0>)
 8005e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e28:	4a0e      	ldr	r2, [pc, #56]	; (8005e64 <HAL_PCD_MspInit+0xa0>)
 8005e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e2e:	6353      	str	r3, [r2, #52]	; 0x34
 8005e30:	2300      	movs	r3, #0
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <HAL_PCD_MspInit+0xa0>)
 8005e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e38:	4a0a      	ldr	r2, [pc, #40]	; (8005e64 <HAL_PCD_MspInit+0xa0>)
 8005e3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e3e:	6453      	str	r3, [r2, #68]	; 0x44
 8005e40:	4b08      	ldr	r3, [pc, #32]	; (8005e64 <HAL_PCD_MspInit+0xa0>)
 8005e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e48:	60fb      	str	r3, [r7, #12]
 8005e4a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2100      	movs	r1, #0
 8005e50:	2043      	movs	r0, #67	; 0x43
 8005e52:	f7fa fe30 	bl	8000ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005e56:	2043      	movs	r0, #67	; 0x43
 8005e58:	f7fa fe49 	bl	8000aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005e5c:	bf00      	nop
 8005e5e:	3728      	adds	r7, #40	; 0x28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	40023800 	.word	0x40023800
 8005e68:	40020000 	.word	0x40020000

08005e6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e80:	4619      	mov	r1, r3
 8005e82:	4610      	mov	r0, r2
 8005e84:	f7fe fcd0 	bl	8004828 <USBD_LL_SetupStage>
}
 8005e88:	bf00      	nop
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005ea2:	78fa      	ldrb	r2, [r7, #3]
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	1a9b      	subs	r3, r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	440b      	add	r3, r1
 8005eb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	78fb      	ldrb	r3, [r7, #3]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	f7fe fd0a 	bl	80048d2 <USBD_LL_DataOutStage>
}
 8005ebe:	bf00      	nop
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b082      	sub	sp, #8
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	460b      	mov	r3, r1
 8005ed0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005ed8:	78fa      	ldrb	r2, [r7, #3]
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	4613      	mov	r3, r2
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	1a9b      	subs	r3, r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	440b      	add	r3, r1
 8005ee6:	3348      	adds	r3, #72	; 0x48
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	78fb      	ldrb	r3, [r7, #3]
 8005eec:	4619      	mov	r1, r3
 8005eee:	f7fe fd53 	bl	8004998 <USBD_LL_DataInStage>
}
 8005ef2:	bf00      	nop
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b082      	sub	sp, #8
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fe fe67 	bl	8004bdc <USBD_LL_SOF>
}
 8005f0e:	bf00      	nop
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d001      	beq.n	8005f2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005f2a:	f7fa fbb5 	bl	8000698 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f34:	7bfa      	ldrb	r2, [r7, #15]
 8005f36:	4611      	mov	r1, r2
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fe fe11 	bl	8004b60 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fe fdbd 	bl	8004ac4 <USBD_LL_Reset>
}
 8005f4a:	bf00      	nop
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fe fe0c 	bl	8004b80 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f7a:	f043 0301 	orr.w	r3, r3, #1
 8005f7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005f88:	4b04      	ldr	r3, [pc, #16]	; (8005f9c <HAL_PCD_SuspendCallback+0x48>)
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	4a03      	ldr	r2, [pc, #12]	; (8005f9c <HAL_PCD_SuspendCallback+0x48>)
 8005f8e:	f043 0306 	orr.w	r3, r3, #6
 8005f92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005f94:	bf00      	nop
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	e000ed00 	.word	0xe000ed00

08005fa0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fe fdfc 	bl	8004bac <USBD_LL_Resume>
}
 8005fb4:	bf00      	nop
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005fce:	78fa      	ldrb	r2, [r7, #3]
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fe fe4a 	bl	8004c6c <USBD_LL_IsoOUTIncomplete>
}
 8005fd8:	bf00      	nop
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ff2:	78fa      	ldrb	r2, [r7, #3]
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fe fe12 	bl	8004c20 <USBD_LL_IsoINIncomplete>
}
 8005ffc:	bf00      	nop
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006012:	4618      	mov	r0, r3
 8006014:	f7fe fe50 	bl	8004cb8 <USBD_LL_DevConnected>
}
 8006018:	bf00      	nop
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800602e:	4618      	mov	r0, r3
 8006030:	f7fe fe4d 	bl	8004cce <USBD_LL_DevDisconnected>
}
 8006034:	bf00      	nop
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d13c      	bne.n	80060c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800604c:	4a20      	ldr	r2, [pc, #128]	; (80060d0 <USBD_LL_Init+0x94>)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a1e      	ldr	r2, [pc, #120]	; (80060d0 <USBD_LL_Init+0x94>)
 8006058:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800605c:	4b1c      	ldr	r3, [pc, #112]	; (80060d0 <USBD_LL_Init+0x94>)
 800605e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006062:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006064:	4b1a      	ldr	r3, [pc, #104]	; (80060d0 <USBD_LL_Init+0x94>)
 8006066:	2204      	movs	r2, #4
 8006068:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800606a:	4b19      	ldr	r3, [pc, #100]	; (80060d0 <USBD_LL_Init+0x94>)
 800606c:	2202      	movs	r2, #2
 800606e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006070:	4b17      	ldr	r3, [pc, #92]	; (80060d0 <USBD_LL_Init+0x94>)
 8006072:	2200      	movs	r2, #0
 8006074:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006076:	4b16      	ldr	r3, [pc, #88]	; (80060d0 <USBD_LL_Init+0x94>)
 8006078:	2202      	movs	r2, #2
 800607a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800607c:	4b14      	ldr	r3, [pc, #80]	; (80060d0 <USBD_LL_Init+0x94>)
 800607e:	2200      	movs	r2, #0
 8006080:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006082:	4b13      	ldr	r3, [pc, #76]	; (80060d0 <USBD_LL_Init+0x94>)
 8006084:	2200      	movs	r2, #0
 8006086:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006088:	4b11      	ldr	r3, [pc, #68]	; (80060d0 <USBD_LL_Init+0x94>)
 800608a:	2200      	movs	r2, #0
 800608c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800608e:	4b10      	ldr	r3, [pc, #64]	; (80060d0 <USBD_LL_Init+0x94>)
 8006090:	2200      	movs	r2, #0
 8006092:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006094:	4b0e      	ldr	r3, [pc, #56]	; (80060d0 <USBD_LL_Init+0x94>)
 8006096:	2200      	movs	r2, #0
 8006098:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800609a:	480d      	ldr	r0, [pc, #52]	; (80060d0 <USBD_LL_Init+0x94>)
 800609c:	f7fa fedf 	bl	8000e5e <HAL_PCD_Init>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80060a6:	f7fa faf7 	bl	8000698 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80060aa:	2180      	movs	r1, #128	; 0x80
 80060ac:	4808      	ldr	r0, [pc, #32]	; (80060d0 <USBD_LL_Init+0x94>)
 80060ae:	f7fc f83c 	bl	800212a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80060b2:	2240      	movs	r2, #64	; 0x40
 80060b4:	2100      	movs	r1, #0
 80060b6:	4806      	ldr	r0, [pc, #24]	; (80060d0 <USBD_LL_Init+0x94>)
 80060b8:	f7fb fff0 	bl	800209c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80060bc:	2280      	movs	r2, #128	; 0x80
 80060be:	2101      	movs	r1, #1
 80060c0:	4803      	ldr	r0, [pc, #12]	; (80060d0 <USBD_LL_Init+0x94>)
 80060c2:	f7fb ffeb 	bl	800209c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	20001894 	.word	0x20001894

080060d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060e0:	2300      	movs	r3, #0
 80060e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fa ffd4 	bl	8001098 <HAL_PCD_Start>
 80060f0:	4603      	mov	r3, r0
 80060f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 f942 	bl	8006380 <USBD_Get_USB_Status>
 80060fc:	4603      	mov	r3, r0
 80060fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006100:	7bbb      	ldrb	r3, [r7, #14]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b084      	sub	sp, #16
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	4608      	mov	r0, r1
 8006114:	4611      	mov	r1, r2
 8006116:	461a      	mov	r2, r3
 8006118:	4603      	mov	r3, r0
 800611a:	70fb      	strb	r3, [r7, #3]
 800611c:	460b      	mov	r3, r1
 800611e:	70bb      	strb	r3, [r7, #2]
 8006120:	4613      	mov	r3, r2
 8006122:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006124:	2300      	movs	r3, #0
 8006126:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006132:	78bb      	ldrb	r3, [r7, #2]
 8006134:	883a      	ldrh	r2, [r7, #0]
 8006136:	78f9      	ldrb	r1, [r7, #3]
 8006138:	f7fb fbb8 	bl	80018ac <HAL_PCD_EP_Open>
 800613c:	4603      	mov	r3, r0
 800613e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	4618      	mov	r0, r3
 8006144:	f000 f91c 	bl	8006380 <USBD_Get_USB_Status>
 8006148:	4603      	mov	r3, r0
 800614a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800614c:	7bbb      	ldrb	r3, [r7, #14]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b084      	sub	sp, #16
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	460b      	mov	r3, r1
 8006160:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006170:	78fa      	ldrb	r2, [r7, #3]
 8006172:	4611      	mov	r1, r2
 8006174:	4618      	mov	r0, r3
 8006176:	f7fb fc01 	bl	800197c <HAL_PCD_EP_Close>
 800617a:	4603      	mov	r3, r0
 800617c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	4618      	mov	r0, r3
 8006182:	f000 f8fd 	bl	8006380 <USBD_Get_USB_Status>
 8006186:	4603      	mov	r3, r0
 8006188:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800618a:	7bbb      	ldrb	r3, [r7, #14]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80061ae:	78fa      	ldrb	r2, [r7, #3]
 80061b0:	4611      	mov	r1, r2
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fb fcd9 	bl	8001b6a <HAL_PCD_EP_SetStall>
 80061b8:	4603      	mov	r3, r0
 80061ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 f8de 	bl	8006380 <USBD_Get_USB_Status>
 80061c4:	4603      	mov	r3, r0
 80061c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	460b      	mov	r3, r1
 80061dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80061ec:	78fa      	ldrb	r2, [r7, #3]
 80061ee:	4611      	mov	r1, r2
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fb fd1e 	bl	8001c32 <HAL_PCD_EP_ClrStall>
 80061f6:	4603      	mov	r3, r0
 80061f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 f8bf 	bl	8006380 <USBD_Get_USB_Status>
 8006202:	4603      	mov	r3, r0
 8006204:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006206:	7bbb      	ldrb	r3, [r7, #14]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	460b      	mov	r3, r1
 800621a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006222:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006228:	2b00      	cmp	r3, #0
 800622a:	da0b      	bge.n	8006244 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006232:	68f9      	ldr	r1, [r7, #12]
 8006234:	4613      	mov	r3, r2
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	1a9b      	subs	r3, r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	440b      	add	r3, r1
 800623e:	333e      	adds	r3, #62	; 0x3e
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	e00b      	b.n	800625c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006244:	78fb      	ldrb	r3, [r7, #3]
 8006246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800624a:	68f9      	ldr	r1, [r7, #12]
 800624c:	4613      	mov	r3, r2
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	1a9b      	subs	r3, r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	440b      	add	r3, r1
 8006256:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800625a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006274:	2300      	movs	r3, #0
 8006276:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006282:	78fa      	ldrb	r2, [r7, #3]
 8006284:	4611      	mov	r1, r2
 8006286:	4618      	mov	r0, r3
 8006288:	f7fb faeb 	bl	8001862 <HAL_PCD_SetAddress>
 800628c:	4603      	mov	r3, r0
 800628e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006290:	7bfb      	ldrb	r3, [r7, #15]
 8006292:	4618      	mov	r0, r3
 8006294:	f000 f874 	bl	8006380 <USBD_Get_USB_Status>
 8006298:	4603      	mov	r3, r0
 800629a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800629c:	7bbb      	ldrb	r3, [r7, #14]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b086      	sub	sp, #24
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
 80062b2:	460b      	mov	r3, r1
 80062b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80062c4:	7af9      	ldrb	r1, [r7, #11]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	f7fb fc04 	bl	8001ad6 <HAL_PCD_EP_Transmit>
 80062ce:	4603      	mov	r3, r0
 80062d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062d2:	7dfb      	ldrb	r3, [r7, #23]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 f853 	bl	8006380 <USBD_Get_USB_Status>
 80062da:	4603      	mov	r3, r0
 80062dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80062de:	7dbb      	ldrb	r3, [r7, #22]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	607a      	str	r2, [r7, #4]
 80062f2:	603b      	str	r3, [r7, #0]
 80062f4:	460b      	mov	r3, r1
 80062f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006306:	7af9      	ldrb	r1, [r7, #11]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	f7fb fb80 	bl	8001a10 <HAL_PCD_EP_Receive>
 8006310:	4603      	mov	r3, r0
 8006312:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006314:	7dfb      	ldrb	r3, [r7, #23]
 8006316:	4618      	mov	r0, r3
 8006318:	f000 f832 	bl	8006380 <USBD_Get_USB_Status>
 800631c:	4603      	mov	r3, r0
 800631e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006320:	7dbb      	ldrb	r3, [r7, #22]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b082      	sub	sp, #8
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	460b      	mov	r3, r1
 8006334:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800633c:	78fa      	ldrb	r2, [r7, #3]
 800633e:	4611      	mov	r1, r2
 8006340:	4618      	mov	r0, r3
 8006342:	f7fb fbb0 	bl	8001aa6 <HAL_PCD_EP_GetRxCount>
 8006346:	4603      	mov	r3, r0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006358:	4b03      	ldr	r3, [pc, #12]	; (8006368 <USBD_static_malloc+0x18>)
}
 800635a:	4618      	mov	r0, r3
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	200001a0 	.word	0x200001a0

0800636c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]

}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	4603      	mov	r3, r0
 8006388:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800638e:	79fb      	ldrb	r3, [r7, #7]
 8006390:	2b03      	cmp	r3, #3
 8006392:	d817      	bhi.n	80063c4 <USBD_Get_USB_Status+0x44>
 8006394:	a201      	add	r2, pc, #4	; (adr r2, 800639c <USBD_Get_USB_Status+0x1c>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	080063ad 	.word	0x080063ad
 80063a0:	080063b3 	.word	0x080063b3
 80063a4:	080063b9 	.word	0x080063b9
 80063a8:	080063bf 	.word	0x080063bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	73fb      	strb	r3, [r7, #15]
    break;
 80063b0:	e00b      	b.n	80063ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80063b2:	2303      	movs	r3, #3
 80063b4:	73fb      	strb	r3, [r7, #15]
    break;
 80063b6:	e008      	b.n	80063ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80063b8:	2301      	movs	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]
    break;
 80063bc:	e005      	b.n	80063ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80063be:	2303      	movs	r3, #3
 80063c0:	73fb      	strb	r3, [r7, #15]
    break;
 80063c2:	e002      	b.n	80063ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80063c4:	2303      	movs	r3, #3
 80063c6:	73fb      	strb	r3, [r7, #15]
    break;
 80063c8:	bf00      	nop
  }
  return usb_status;
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <__libc_init_array>:
 80063d8:	b570      	push	{r4, r5, r6, lr}
 80063da:	4d0d      	ldr	r5, [pc, #52]	; (8006410 <__libc_init_array+0x38>)
 80063dc:	4c0d      	ldr	r4, [pc, #52]	; (8006414 <__libc_init_array+0x3c>)
 80063de:	1b64      	subs	r4, r4, r5
 80063e0:	10a4      	asrs	r4, r4, #2
 80063e2:	2600      	movs	r6, #0
 80063e4:	42a6      	cmp	r6, r4
 80063e6:	d109      	bne.n	80063fc <__libc_init_array+0x24>
 80063e8:	4d0b      	ldr	r5, [pc, #44]	; (8006418 <__libc_init_array+0x40>)
 80063ea:	4c0c      	ldr	r4, [pc, #48]	; (800641c <__libc_init_array+0x44>)
 80063ec:	f000 f820 	bl	8006430 <_init>
 80063f0:	1b64      	subs	r4, r4, r5
 80063f2:	10a4      	asrs	r4, r4, #2
 80063f4:	2600      	movs	r6, #0
 80063f6:	42a6      	cmp	r6, r4
 80063f8:	d105      	bne.n	8006406 <__libc_init_array+0x2e>
 80063fa:	bd70      	pop	{r4, r5, r6, pc}
 80063fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006400:	4798      	blx	r3
 8006402:	3601      	adds	r6, #1
 8006404:	e7ee      	b.n	80063e4 <__libc_init_array+0xc>
 8006406:	f855 3b04 	ldr.w	r3, [r5], #4
 800640a:	4798      	blx	r3
 800640c:	3601      	adds	r6, #1
 800640e:	e7f2      	b.n	80063f6 <__libc_init_array+0x1e>
 8006410:	080064b4 	.word	0x080064b4
 8006414:	080064b4 	.word	0x080064b4
 8006418:	080064b4 	.word	0x080064b4
 800641c:	080064b8 	.word	0x080064b8

08006420 <memset>:
 8006420:	4402      	add	r2, r0
 8006422:	4603      	mov	r3, r0
 8006424:	4293      	cmp	r3, r2
 8006426:	d100      	bne.n	800642a <memset+0xa>
 8006428:	4770      	bx	lr
 800642a:	f803 1b01 	strb.w	r1, [r3], #1
 800642e:	e7f9      	b.n	8006424 <memset+0x4>

08006430 <_init>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	bf00      	nop
 8006434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006436:	bc08      	pop	{r3}
 8006438:	469e      	mov	lr, r3
 800643a:	4770      	bx	lr

0800643c <_fini>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	bf00      	nop
 8006440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006442:	bc08      	pop	{r3}
 8006444:	469e      	mov	lr, r3
 8006446:	4770      	bx	lr
